"use strict";
// https://github.com/ethereum-optimism/optaimism/blob/master/packages/core-utils/src/watcher.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.Watcher = void 0;
/* External Imports */
const ethers_1 = require("ethers");
class Watcher {
    constructor(opts) {
        this.NUM_BLOCKS_TO_FETCH = 10000000;
        this.l1 = opts.l1;
        this.l2 = opts.l2;
    }
    async getMessageHashesFromL1Tx(l1TxHash) {
        return this.getMessageHashesFromTx(this.l1, l1TxHash);
    }
    async getMessageHashesFromL2Tx(l2TxHash) {
        return this.getMessageHashesFromTx(this.l2, l2TxHash);
    }
    async getL1TransactionReceipt(l2ToL1MsgHash, pollForPending = true) {
        return this.getTransactionReceipt(this.l2, l2ToL1MsgHash, pollForPending);
    }
    async getL2TransactionReceipt(l1ToL2MsgHash, pollForPending = true) {
        return this.getTransactionReceipt(this.l2, l1ToL2MsgHash, pollForPending);
    }
    async getMessageHashesFromTx(layer, txHash) {
        const receipt = await layer.provider.getTransactionReceipt(txHash);
        if (!receipt) {
            return [];
        }
        const msgHashes = [];
        for (const log of receipt.logs) {
            if (log.address === layer.messengerAddress && log.topics[0] === ethers_1.ethers.utils.id('SentMessage(bytes)')) {
                const [message] = ethers_1.ethers.utils.defaultAbiCoder.decode(['bytes'], log.data);
                msgHashes.push(ethers_1.ethers.utils.solidityKeccak256(['bytes'], [message]));
            }
        }
        return msgHashes;
    }
    async getTransactionReceipt(layer, msgHash, pollForPending = true) {
        const blockNumber = await layer.provider.getBlockNumber();
        const startingBlock = Math.max(blockNumber - this.NUM_BLOCKS_TO_FETCH, 0);
        const filter = {
            address: layer.messengerAddress,
            topics: [ethers_1.ethers.utils.id(`RelayedMessage(bytes32)`)],
            fromBlock: startingBlock,
        };
        const logs = await layer.provider.getLogs(filter);
        const matches = logs.filter((log) => log.data === msgHash);
        // Message was relayed in the past
        if (matches.length > 0) {
            if (matches.length > 1) {
                throw Error('Found multiple transactions relaying the same message hash.');
            }
            return layer.provider.getTransactionReceipt(matches[0].transactionHash);
        }
        if (!pollForPending) {
            return Promise.resolve(undefined);
        }
        // Message has yet to be relayed, poll until it is found
        return new Promise(async (resolve, reject) => {
            layer.provider.on(filter, async (log) => {
                if (log.data === msgHash) {
                    try {
                        const txReceipt = await layer.provider.getTransactionReceipt(log.transactionHash);
                        layer.provider.off(filter);
                        resolve(txReceipt);
                    }
                    catch (e) {
                        reject(e);
                    }
                }
            });
        });
    }
}
exports.Watcher = Watcher;
//# sourceMappingURL=data:application/json;base64,