"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptimismEnv = void 0;
const contracts_1 = require("@eth-optimism/contracts");
const utils_1 = require("./utils");
const watcher_utils_1 = require("./watcher-utils");
/// Helper class for instantiating a test environment with a funded account
class OptimismEnv {
    constructor(args) {
        this.addressManager = args.addressManager;
        this.gateway = args.gateway;
        this.l1Messenger = args.l1Messenger;
        this.ovmEth = args.ovmEth;
        this.l2Messenger = args.l2Messenger;
        this.watcher = args.watcher;
        this.l1Wallet = args.l1Wallet;
        this.l2Wallet = args.l2Wallet;
        this.ctc = args.ctc;
    }
    static async new(addressManagerAddr, l1Wallet, l2Wallet) {
        const addressManager = utils_1.getAddressManager(addressManagerAddr, l1Wallet);
        const watcher = await watcher_utils_1.initWatcher(l1Wallet.provider, l2Wallet.provider, addressManager);
        const gateway = await utils_1.getGateway(l1Wallet, addressManager);
        const ovmEth = utils_1.getOvmEth(l2Wallet);
        const l1Messenger = contracts_1.getContractFactory('iOVM_L1CrossDomainMessenger')
            .connect(l1Wallet)
            .attach(watcher.l1.messengerAddress);
        const l2Messenger = contracts_1.getContractFactory('iOVM_L2CrossDomainMessenger')
            .connect(l2Wallet)
            .attach(watcher.l2.messengerAddress);
        const ctcAddress = await addressManager.getAddress('OVM_CanonicalTransactionChain');
        const ctc = contracts_1.getContractFactory('OVM_CanonicalTransactionChain').connect(l1Wallet).attach(ctcAddress);
        return new OptimismEnv({
            addressManager,
            gateway,
            ctc,
            l1Messenger,
            ovmEth,
            l2Messenger,
            watcher,
            l1Wallet,
            l2Wallet,
        });
    }
    async fundL2(amount, requireZeroBalance = true) {
        // fund the user if needed
        const balance = await this.l2Wallet.getBalance();
        if (requireZeroBalance && balance.isZero()) {
            await utils_1.fundUser(this.watcher, this.gateway, this.l2Wallet.address, amount);
        }
    }
    async waitForXDomainTransaction(tx, direction) {
        return watcher_utils_1.waitForXDomainTransaction(this.watcher, tx, direction);
    }
}
exports.OptimismEnv = OptimismEnv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Vudi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1REFBNEQ7QUFHNUQsbUNBQTRFO0FBQzVFLG1EQUEyRztBQUczRywyRUFBMkU7QUFDM0UsTUFBYSxXQUFXO0lBa0J0QixZQUFZLElBQVM7UUFDbkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFBO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQTtRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUE7UUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQTtRQUNuQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUE7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFBO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQTtRQUM3QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUE7SUFDckIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGtCQUEwQixFQUFFLFFBQWdCLEVBQUUsUUFBZ0I7UUFDN0UsTUFBTSxjQUFjLEdBQUcseUJBQWlCLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDdEUsTUFBTSxPQUFPLEdBQUcsTUFBTSwyQkFBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQTtRQUN2RixNQUFNLE9BQU8sR0FBRyxNQUFNLGtCQUFVLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFBO1FBRTFELE1BQU0sTUFBTSxHQUFHLGlCQUFTLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDbEMsTUFBTSxXQUFXLEdBQUcsOEJBQWtCLENBQUMsNkJBQTZCLENBQUM7YUFDbEUsT0FBTyxDQUFDLFFBQVEsQ0FBQzthQUNqQixNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1FBQ3RDLE1BQU0sV0FBVyxHQUFHLDhCQUFrQixDQUFDLDZCQUE2QixDQUFDO2FBQ2xFLE9BQU8sQ0FBQyxRQUFRLENBQUM7YUFDakIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtRQUV0QyxNQUFNLFVBQVUsR0FBRyxNQUFNLGNBQWMsQ0FBQyxVQUFVLENBQUMsK0JBQStCLENBQUMsQ0FBQTtRQUNuRixNQUFNLEdBQUcsR0FBRyw4QkFBa0IsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFcEcsT0FBTyxJQUFJLFdBQVcsQ0FBQztZQUNyQixjQUFjO1lBQ2QsT0FBTztZQUNQLEdBQUc7WUFDSCxXQUFXO1lBQ1gsTUFBTTtZQUNOLFdBQVc7WUFDWCxPQUFPO1lBQ1AsUUFBUTtZQUNSLFFBQVE7U0FDVCxDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFvQixFQUFFLGtCQUFrQixHQUFHLElBQUk7UUFDMUQsMEJBQTBCO1FBQzFCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUNoRCxJQUFJLGtCQUFrQixJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUMxQyxNQUFNLGdCQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1NBQzFFO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyx5QkFBeUIsQ0FDN0IsRUFBc0QsRUFDdEQsU0FBb0I7UUFFcEIsT0FBTyx5Q0FBeUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0NBQ0Y7QUF6RUQsa0NBeUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q29udHJhY3RGYWN0b3J5IH0gZnJvbSAnQGV0aC1vcHRpbWlzbS9jb250cmFjdHMnXG5pbXBvcnQgeyBXYXRjaGVyIH0gZnJvbSAnLi93YXRjaGVyJ1xuaW1wb3J0IHsgQmlnTnVtYmVyaXNoLCBDb250cmFjdCwgV2FsbGV0IH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IHsgZ2V0QWRkcmVzc01hbmFnZXIsIGdldE92bUV0aCwgZ2V0R2F0ZXdheSwgZnVuZFVzZXIgfSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IHsgaW5pdFdhdGNoZXIsIENyb3NzRG9tYWluTWVzc2FnZVBhaXIsIERpcmVjdGlvbiwgd2FpdEZvclhEb21haW5UcmFuc2FjdGlvbiB9IGZyb20gJy4vd2F0Y2hlci11dGlscydcbmltcG9ydCB7IFRyYW5zYWN0aW9uUmVzcG9uc2UgfSBmcm9tICdAZXRoZXJzcHJvamVjdC9wcm92aWRlcnMnXG5cbi8vLyBIZWxwZXIgY2xhc3MgZm9yIGluc3RhbnRpYXRpbmcgYSB0ZXN0IGVudmlyb25tZW50IHdpdGggYSBmdW5kZWQgYWNjb3VudFxuZXhwb3J0IGNsYXNzIE9wdGltaXNtRW52IHtcbiAgLy8gTDEgQ29udHJhY3RzXG4gIGFkZHJlc3NNYW5hZ2VyOiBDb250cmFjdFxuICBnYXRld2F5OiBDb250cmFjdFxuICBsMU1lc3NlbmdlcjogQ29udHJhY3RcbiAgY3RjOiBDb250cmFjdFxuXG4gIC8vIEwyIENvbnRyYWN0c1xuICBvdm1FdGg6IENvbnRyYWN0XG4gIGwyTWVzc2VuZ2VyOiBDb250cmFjdFxuXG4gIC8vIFRoZSBMMSA8PiBMMiBTdGF0ZSB3YXRjaGVyXG4gIHdhdGNoZXI6IFdhdGNoZXJcblxuICAvLyBUaGUgd2FsbGV0c1xuICBsMVdhbGxldDogV2FsbGV0XG4gIGwyV2FsbGV0OiBXYWxsZXRcblxuICBjb25zdHJ1Y3RvcihhcmdzOiBhbnkpIHtcbiAgICB0aGlzLmFkZHJlc3NNYW5hZ2VyID0gYXJncy5hZGRyZXNzTWFuYWdlclxuICAgIHRoaXMuZ2F0ZXdheSA9IGFyZ3MuZ2F0ZXdheVxuICAgIHRoaXMubDFNZXNzZW5nZXIgPSBhcmdzLmwxTWVzc2VuZ2VyXG4gICAgdGhpcy5vdm1FdGggPSBhcmdzLm92bUV0aFxuICAgIHRoaXMubDJNZXNzZW5nZXIgPSBhcmdzLmwyTWVzc2VuZ2VyXG4gICAgdGhpcy53YXRjaGVyID0gYXJncy53YXRjaGVyXG4gICAgdGhpcy5sMVdhbGxldCA9IGFyZ3MubDFXYWxsZXRcbiAgICB0aGlzLmwyV2FsbGV0ID0gYXJncy5sMldhbGxldFxuICAgIHRoaXMuY3RjID0gYXJncy5jdGNcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBuZXcoYWRkcmVzc01hbmFnZXJBZGRyOiBzdHJpbmcsIGwxV2FsbGV0OiBXYWxsZXQsIGwyV2FsbGV0OiBXYWxsZXQpOiBQcm9taXNlPE9wdGltaXNtRW52PiB7XG4gICAgY29uc3QgYWRkcmVzc01hbmFnZXIgPSBnZXRBZGRyZXNzTWFuYWdlcihhZGRyZXNzTWFuYWdlckFkZHIsIGwxV2FsbGV0KVxuICAgIGNvbnN0IHdhdGNoZXIgPSBhd2FpdCBpbml0V2F0Y2hlcihsMVdhbGxldC5wcm92aWRlciwgbDJXYWxsZXQucHJvdmlkZXIsIGFkZHJlc3NNYW5hZ2VyKVxuICAgIGNvbnN0IGdhdGV3YXkgPSBhd2FpdCBnZXRHYXRld2F5KGwxV2FsbGV0LCBhZGRyZXNzTWFuYWdlcilcblxuICAgIGNvbnN0IG92bUV0aCA9IGdldE92bUV0aChsMldhbGxldClcbiAgICBjb25zdCBsMU1lc3NlbmdlciA9IGdldENvbnRyYWN0RmFjdG9yeSgnaU9WTV9MMUNyb3NzRG9tYWluTWVzc2VuZ2VyJylcbiAgICAgIC5jb25uZWN0KGwxV2FsbGV0KVxuICAgICAgLmF0dGFjaCh3YXRjaGVyLmwxLm1lc3NlbmdlckFkZHJlc3MpXG4gICAgY29uc3QgbDJNZXNzZW5nZXIgPSBnZXRDb250cmFjdEZhY3RvcnkoJ2lPVk1fTDJDcm9zc0RvbWFpbk1lc3NlbmdlcicpXG4gICAgICAuY29ubmVjdChsMldhbGxldClcbiAgICAgIC5hdHRhY2god2F0Y2hlci5sMi5tZXNzZW5nZXJBZGRyZXNzKVxuXG4gICAgY29uc3QgY3RjQWRkcmVzcyA9IGF3YWl0IGFkZHJlc3NNYW5hZ2VyLmdldEFkZHJlc3MoJ09WTV9DYW5vbmljYWxUcmFuc2FjdGlvbkNoYWluJylcbiAgICBjb25zdCBjdGMgPSBnZXRDb250cmFjdEZhY3RvcnkoJ09WTV9DYW5vbmljYWxUcmFuc2FjdGlvbkNoYWluJykuY29ubmVjdChsMVdhbGxldCkuYXR0YWNoKGN0Y0FkZHJlc3MpXG5cbiAgICByZXR1cm4gbmV3IE9wdGltaXNtRW52KHtcbiAgICAgIGFkZHJlc3NNYW5hZ2VyLFxuICAgICAgZ2F0ZXdheSxcbiAgICAgIGN0YyxcbiAgICAgIGwxTWVzc2VuZ2VyLFxuICAgICAgb3ZtRXRoLFxuICAgICAgbDJNZXNzZW5nZXIsXG4gICAgICB3YXRjaGVyLFxuICAgICAgbDFXYWxsZXQsXG4gICAgICBsMldhbGxldCxcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgZnVuZEwyKGFtb3VudDogQmlnTnVtYmVyaXNoLCByZXF1aXJlWmVyb0JhbGFuY2UgPSB0cnVlKSB7XG4gICAgLy8gZnVuZCB0aGUgdXNlciBpZiBuZWVkZWRcbiAgICBjb25zdCBiYWxhbmNlID0gYXdhaXQgdGhpcy5sMldhbGxldC5nZXRCYWxhbmNlKClcbiAgICBpZiAocmVxdWlyZVplcm9CYWxhbmNlICYmIGJhbGFuY2UuaXNaZXJvKCkpIHtcbiAgICAgIGF3YWl0IGZ1bmRVc2VyKHRoaXMud2F0Y2hlciwgdGhpcy5nYXRld2F5LCB0aGlzLmwyV2FsbGV0LmFkZHJlc3MsIGFtb3VudClcbiAgICB9XG4gIH1cblxuICBhc3luYyB3YWl0Rm9yWERvbWFpblRyYW5zYWN0aW9uKFxuICAgIHR4OiBQcm9taXNlPFRyYW5zYWN0aW9uUmVzcG9uc2U+IHwgVHJhbnNhY3Rpb25SZXNwb25zZSxcbiAgICBkaXJlY3Rpb246IERpcmVjdGlvbixcbiAgKTogUHJvbWlzZTxDcm9zc0RvbWFpbk1lc3NhZ2VQYWlyPiB7XG4gICAgcmV0dXJuIHdhaXRGb3JYRG9tYWluVHJhbnNhY3Rpb24odGhpcy53YXRjaGVyLCB0eCwgZGlyZWN0aW9uKVxuICB9XG59XG4iXX0=