"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptimismEnv = void 0;
const contracts_1 = require("@eth-optimism/contracts");
const utils_1 = require("./utils");
const watcher_utils_1 = require("./watcher-utils");
const units_1 = require("@ethersproject/units");
/// Helper class for instantiating a test environment with a funded account
class OptimismEnv {
    constructor(args) {
        this.addressManager = args.addressManager;
        this.gateway = args.gateway;
        this.l1Messenger = args.l1Messenger;
        this.ovmEth = args.ovmEth;
        this.l2Messenger = args.l2Messenger;
        this.watcher = args.watcher;
        this.l1Wallet = args.l1Wallet;
        this.l2Wallet = args.l2Wallet;
        this.ctc = args.ctc;
    }
    static async new(addressManagerAddr, l1Wallet, l2Wallet) {
        const addressManager = utils_1.getAddressManager(addressManagerAddr, l1Wallet);
        const watcher = await watcher_utils_1.initWatcher(l1Wallet.provider, l2Wallet.provider, addressManager);
        const gateway = await utils_1.getGateway(l1Wallet, addressManager);
        const ovmEth = utils_1.getOvmEth(l2Wallet);
        const l1Messenger = contracts_1.getContractFactory('iOVM_L1CrossDomainMessenger')
            .connect(l1Wallet)
            .attach(watcher.l1.messengerAddress);
        const l2Messenger = contracts_1.getContractFactory('iOVM_L2CrossDomainMessenger')
            .connect(l2Wallet)
            .attach(watcher.l2.messengerAddress);
        const ctcAddress = await addressManager.getAddress('OVM_CanonicalTransactionChain');
        const ctc = contracts_1.getContractFactory('OVM_CanonicalTransactionChain').connect(l1Wallet).attach(ctcAddress);
        return new OptimismEnv({
            addressManager,
            gateway,
            ctc,
            l1Messenger,
            ovmEth,
            l2Messenger,
            watcher,
            l1Wallet,
            l2Wallet,
        });
    }
    async depositL2(amount, requireBalance = units_1.parseEther('1')) {
        // fund the user if needed
        const balance = await this.l2Wallet.getBalance();
        if (balance.lt(requireBalance)) {
            await utils_1.depositL2(this.watcher, this.gateway, this.l2Wallet.address, amount);
        }
    }
    // this will take a long time on networks other than local
    async withdrawL1(amount, requireBalance = units_1.parseEther('1')) {
        // fund the user if needed
        const balance = await this.l1Wallet.getBalance();
        if (balance.lt(requireBalance)) {
            await utils_1.withdrawL1(this.watcher, this.ovmEth, this.l1Wallet.address, amount);
        }
    }
    async waitForXDomainTransaction(tx, direction) {
        return watcher_utils_1.waitForXDomainTransaction(this.watcher, tx, direction);
    }
}
exports.OptimismEnv = OptimismEnv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Vudi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1REFBNEQ7QUFHNUQsbUNBQXlGO0FBQ3pGLG1EQUEyRztBQUUzRyxnREFBaUQ7QUFFakQsMkVBQTJFO0FBQzNFLE1BQWEsV0FBVztJQWtCdEIsWUFBWSxJQUFTO1FBQ25CLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQTtRQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUE7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFBO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUN6QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUE7UUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFBO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQTtRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUE7UUFDN0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFBO0lBQ3JCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxrQkFBMEIsRUFBRSxRQUFnQixFQUFFLFFBQWdCO1FBQzdFLE1BQU0sY0FBYyxHQUFHLHlCQUFpQixDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ3RFLE1BQU0sT0FBTyxHQUFHLE1BQU0sMkJBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUE7UUFDdkYsTUFBTSxPQUFPLEdBQUcsTUFBTSxrQkFBVSxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQTtRQUUxRCxNQUFNLE1BQU0sR0FBRyxpQkFBUyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2xDLE1BQU0sV0FBVyxHQUFHLDhCQUFrQixDQUFDLDZCQUE2QixDQUFDO2FBQ2xFLE9BQU8sQ0FBQyxRQUFRLENBQUM7YUFDakIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtRQUN0QyxNQUFNLFdBQVcsR0FBRyw4QkFBa0IsQ0FBQyw2QkFBNkIsQ0FBQzthQUNsRSxPQUFPLENBQUMsUUFBUSxDQUFDO2FBQ2pCLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFFdEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxjQUFjLENBQUMsVUFBVSxDQUFDLCtCQUErQixDQUFDLENBQUE7UUFDbkYsTUFBTSxHQUFHLEdBQUcsOEJBQWtCLENBQUMsK0JBQStCLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRXBHLE9BQU8sSUFBSSxXQUFXLENBQUM7WUFDckIsY0FBYztZQUNkLE9BQU87WUFDUCxHQUFHO1lBQ0gsV0FBVztZQUNYLE1BQU07WUFDTixXQUFXO1lBQ1gsT0FBTztZQUNQLFFBQVE7WUFDUixRQUFRO1NBQ1QsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBb0IsRUFBRSxpQkFBK0Isa0JBQVUsQ0FBQyxHQUFHLENBQUM7UUFDbEYsMEJBQTBCO1FBQzFCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtRQUNoRCxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDOUIsTUFBTSxpQkFBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtTQUMzRTtJQUNILENBQUM7SUFFRCwwREFBMEQ7SUFDMUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFvQixFQUFFLGlCQUErQixrQkFBVSxDQUFDLEdBQUcsQ0FBQztRQUNuRiwwQkFBMEI7UUFDMUIsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQ2hELElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUM5QixNQUFNLGtCQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1NBQzNFO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyx5QkFBeUIsQ0FDN0IsRUFBc0QsRUFDdEQsU0FBb0I7UUFFcEIsT0FBTyx5Q0FBeUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0NBQ0Y7QUFsRkQsa0NBa0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q29udHJhY3RGYWN0b3J5IH0gZnJvbSAnQGV0aC1vcHRpbWlzbS9jb250cmFjdHMnXG5pbXBvcnQgeyBXYXRjaGVyIH0gZnJvbSAnQGV0aC1vcHRpbWlzbS9jb3JlLXV0aWxzJ1xuaW1wb3J0IHsgQmlnTnVtYmVyaXNoLCBDb250cmFjdCwgV2FsbGV0IH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IHsgZ2V0QWRkcmVzc01hbmFnZXIsIGdldE92bUV0aCwgZ2V0R2F0ZXdheSwgZGVwb3NpdEwyLCB3aXRoZHJhd0wxIH0gZnJvbSAnLi91dGlscydcbmltcG9ydCB7IGluaXRXYXRjaGVyLCBDcm9zc0RvbWFpbk1lc3NhZ2VQYWlyLCBEaXJlY3Rpb24sIHdhaXRGb3JYRG9tYWluVHJhbnNhY3Rpb24gfSBmcm9tICcuL3dhdGNoZXItdXRpbHMnXG5pbXBvcnQgeyBUcmFuc2FjdGlvblJlc3BvbnNlIH0gZnJvbSAnQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzJ1xuaW1wb3J0IHsgcGFyc2VFdGhlciB9IGZyb20gJ0BldGhlcnNwcm9qZWN0L3VuaXRzJ1xuXG4vLy8gSGVscGVyIGNsYXNzIGZvciBpbnN0YW50aWF0aW5nIGEgdGVzdCBlbnZpcm9ubWVudCB3aXRoIGEgZnVuZGVkIGFjY291bnRcbmV4cG9ydCBjbGFzcyBPcHRpbWlzbUVudiB7XG4gIC8vIEwxIENvbnRyYWN0c1xuICBhZGRyZXNzTWFuYWdlcjogQ29udHJhY3RcbiAgZ2F0ZXdheTogQ29udHJhY3RcbiAgbDFNZXNzZW5nZXI6IENvbnRyYWN0XG4gIGN0YzogQ29udHJhY3RcblxuICAvLyBMMiBDb250cmFjdHNcbiAgb3ZtRXRoOiBDb250cmFjdFxuICBsMk1lc3NlbmdlcjogQ29udHJhY3RcblxuICAvLyBUaGUgTDEgPD4gTDIgU3RhdGUgd2F0Y2hlclxuICB3YXRjaGVyOiBXYXRjaGVyXG5cbiAgLy8gVGhlIHdhbGxldHNcbiAgbDFXYWxsZXQ6IFdhbGxldFxuICBsMldhbGxldDogV2FsbGV0XG5cbiAgY29uc3RydWN0b3IoYXJnczogYW55KSB7XG4gICAgdGhpcy5hZGRyZXNzTWFuYWdlciA9IGFyZ3MuYWRkcmVzc01hbmFnZXJcbiAgICB0aGlzLmdhdGV3YXkgPSBhcmdzLmdhdGV3YXlcbiAgICB0aGlzLmwxTWVzc2VuZ2VyID0gYXJncy5sMU1lc3NlbmdlclxuICAgIHRoaXMub3ZtRXRoID0gYXJncy5vdm1FdGhcbiAgICB0aGlzLmwyTWVzc2VuZ2VyID0gYXJncy5sMk1lc3NlbmdlclxuICAgIHRoaXMud2F0Y2hlciA9IGFyZ3Mud2F0Y2hlclxuICAgIHRoaXMubDFXYWxsZXQgPSBhcmdzLmwxV2FsbGV0XG4gICAgdGhpcy5sMldhbGxldCA9IGFyZ3MubDJXYWxsZXRcbiAgICB0aGlzLmN0YyA9IGFyZ3MuY3RjXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgbmV3KGFkZHJlc3NNYW5hZ2VyQWRkcjogc3RyaW5nLCBsMVdhbGxldDogV2FsbGV0LCBsMldhbGxldDogV2FsbGV0KTogUHJvbWlzZTxPcHRpbWlzbUVudj4ge1xuICAgIGNvbnN0IGFkZHJlc3NNYW5hZ2VyID0gZ2V0QWRkcmVzc01hbmFnZXIoYWRkcmVzc01hbmFnZXJBZGRyLCBsMVdhbGxldClcbiAgICBjb25zdCB3YXRjaGVyID0gYXdhaXQgaW5pdFdhdGNoZXIobDFXYWxsZXQucHJvdmlkZXIsIGwyV2FsbGV0LnByb3ZpZGVyLCBhZGRyZXNzTWFuYWdlcilcbiAgICBjb25zdCBnYXRld2F5ID0gYXdhaXQgZ2V0R2F0ZXdheShsMVdhbGxldCwgYWRkcmVzc01hbmFnZXIpXG5cbiAgICBjb25zdCBvdm1FdGggPSBnZXRPdm1FdGgobDJXYWxsZXQpXG4gICAgY29uc3QgbDFNZXNzZW5nZXIgPSBnZXRDb250cmFjdEZhY3RvcnkoJ2lPVk1fTDFDcm9zc0RvbWFpbk1lc3NlbmdlcicpXG4gICAgICAuY29ubmVjdChsMVdhbGxldClcbiAgICAgIC5hdHRhY2god2F0Y2hlci5sMS5tZXNzZW5nZXJBZGRyZXNzKVxuICAgIGNvbnN0IGwyTWVzc2VuZ2VyID0gZ2V0Q29udHJhY3RGYWN0b3J5KCdpT1ZNX0wyQ3Jvc3NEb21haW5NZXNzZW5nZXInKVxuICAgICAgLmNvbm5lY3QobDJXYWxsZXQpXG4gICAgICAuYXR0YWNoKHdhdGNoZXIubDIubWVzc2VuZ2VyQWRkcmVzcylcblxuICAgIGNvbnN0IGN0Y0FkZHJlc3MgPSBhd2FpdCBhZGRyZXNzTWFuYWdlci5nZXRBZGRyZXNzKCdPVk1fQ2Fub25pY2FsVHJhbnNhY3Rpb25DaGFpbicpXG4gICAgY29uc3QgY3RjID0gZ2V0Q29udHJhY3RGYWN0b3J5KCdPVk1fQ2Fub25pY2FsVHJhbnNhY3Rpb25DaGFpbicpLmNvbm5lY3QobDFXYWxsZXQpLmF0dGFjaChjdGNBZGRyZXNzKVxuXG4gICAgcmV0dXJuIG5ldyBPcHRpbWlzbUVudih7XG4gICAgICBhZGRyZXNzTWFuYWdlcixcbiAgICAgIGdhdGV3YXksXG4gICAgICBjdGMsXG4gICAgICBsMU1lc3NlbmdlcixcbiAgICAgIG92bUV0aCxcbiAgICAgIGwyTWVzc2VuZ2VyLFxuICAgICAgd2F0Y2hlcixcbiAgICAgIGwxV2FsbGV0LFxuICAgICAgbDJXYWxsZXQsXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGRlcG9zaXRMMihhbW91bnQ6IEJpZ051bWJlcmlzaCwgcmVxdWlyZUJhbGFuY2U6IEJpZ051bWJlcmlzaCA9IHBhcnNlRXRoZXIoJzEnKSkge1xuICAgIC8vIGZ1bmQgdGhlIHVzZXIgaWYgbmVlZGVkXG4gICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IHRoaXMubDJXYWxsZXQuZ2V0QmFsYW5jZSgpXG4gICAgaWYgKGJhbGFuY2UubHQocmVxdWlyZUJhbGFuY2UpKSB7XG4gICAgICBhd2FpdCBkZXBvc2l0TDIodGhpcy53YXRjaGVyLCB0aGlzLmdhdGV3YXksIHRoaXMubDJXYWxsZXQuYWRkcmVzcywgYW1vdW50KVxuICAgIH1cbiAgfVxuXG4gIC8vIHRoaXMgd2lsbCB0YWtlIGEgbG9uZyB0aW1lIG9uIG5ldHdvcmtzIG90aGVyIHRoYW4gbG9jYWxcbiAgYXN5bmMgd2l0aGRyYXdMMShhbW91bnQ6IEJpZ051bWJlcmlzaCwgcmVxdWlyZUJhbGFuY2U6IEJpZ051bWJlcmlzaCA9IHBhcnNlRXRoZXIoJzEnKSkge1xuICAgIC8vIGZ1bmQgdGhlIHVzZXIgaWYgbmVlZGVkXG4gICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IHRoaXMubDFXYWxsZXQuZ2V0QmFsYW5jZSgpXG4gICAgaWYgKGJhbGFuY2UubHQocmVxdWlyZUJhbGFuY2UpKSB7XG4gICAgICBhd2FpdCB3aXRoZHJhd0wxKHRoaXMud2F0Y2hlciwgdGhpcy5vdm1FdGgsIHRoaXMubDFXYWxsZXQuYWRkcmVzcywgYW1vdW50KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHdhaXRGb3JYRG9tYWluVHJhbnNhY3Rpb24oXG4gICAgdHg6IFByb21pc2U8VHJhbnNhY3Rpb25SZXNwb25zZT4gfCBUcmFuc2FjdGlvblJlc3BvbnNlLFxuICAgIGRpcmVjdGlvbjogRGlyZWN0aW9uLFxuICApOiBQcm9taXNlPENyb3NzRG9tYWluTWVzc2FnZVBhaXI+IHtcbiAgICByZXR1cm4gd2FpdEZvclhEb21haW5UcmFuc2FjdGlvbih0aGlzLndhdGNoZXIsIHR4LCBkaXJlY3Rpb24pXG4gIH1cbn1cbiJdfQ==