"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withdrawL1 = exports.depositL2 = exports.getOvmEth = exports.getGateway = exports.getAddressManager = exports.MAINNET_ADDRESS_MANAGER_ADDR = exports.KOVAN_ADDRESS_MANAGER_ADDR = exports.LOCAL_ADDRESS_MANAGER_ADDR = exports.OVM_ETH_ADDRESS = exports.PROXY_SEQUENCER_ENTRYPOINT_ADDRESS = void 0;
const ethers_1 = require("ethers");
const contracts_1 = require("@eth-optimism/contracts");
const watcher_utils_1 = require("./watcher-utils");
// Predeploys
exports.PROXY_SEQUENCER_ENTRYPOINT_ADDRESS = '0x4200000000000000000000000000000000000004';
exports.OVM_ETH_ADDRESS = '0x4200000000000000000000000000000000000006';
// The address manager is always at the same address in testnet deployments
exports.LOCAL_ADDRESS_MANAGER_ADDR = '0x5FbDB2315678afecb367f032d93F642f64180aa3';
exports.KOVAN_ADDRESS_MANAGER_ADDR = '0xFaf27b24ba54C6910C12CFF5C9453C0e8D634e05';
exports.MAINNET_ADDRESS_MANAGER_ADDR = '0xd3EeD86464Ff13B4BFD81a3bB1e753b7ceBA3A39';
const getAddressManager = (address, provider) => contracts_1.getContractFactory('Lib_AddressManager').connect(provider).attach(address);
exports.getAddressManager = getAddressManager;
// Gets the gateway using the proxy if available
const getGateway = async (wallet, AddressManager) => {
    const l1GatewayInterface = contracts_1.getContractInterface('OVM_L1ETHGateway');
    const ProxyGatewayAddress = await AddressManager.getAddress('Proxy__OVM_L1ETHGateway');
    const addressToUse = ProxyGatewayAddress !== ethers_1.constants.AddressZero
        ? ProxyGatewayAddress
        : await AddressManager.getAddress('OVM_L1ETHGateway');
    const OVM_L1ETHGateway = new ethers_1.Contract(addressToUse, l1GatewayInterface, wallet);
    return OVM_L1ETHGateway;
};
exports.getGateway = getGateway;
const getOvmEth = (wallet) => new ethers_1.Contract(exports.OVM_ETH_ADDRESS, contracts_1.getContractInterface('OVM_ETH'), wallet);
exports.getOvmEth = getOvmEth;
const depositL2 = async (watcher, gateway, recipient, amount) => {
    const value = ethers_1.BigNumber.from(amount);
    const tx = recipient ? gateway.depositTo(recipient, { value }) : gateway.deposit({ value });
    await watcher_utils_1.waitForXDomainTransaction(watcher, tx, watcher_utils_1.Direction.L1ToL2);
};
exports.depositL2 = depositL2;
const withdrawL1 = async (watcher, gateway, recipient, amount) => {
    const value = ethers_1.BigNumber.from(amount);
    const tx = recipient ? gateway.withdrawTo(recipient, { value }) : gateway.withdraw({ value });
    await watcher_utils_1.waitForXDomainTransaction(watcher, tx, watcher_utils_1.Direction.L1ToL2);
};
exports.withdrawL1 = withdrawL1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQTZFO0FBQzdFLHVEQUFrRjtBQUVsRixtREFBc0U7QUFFdEUsYUFBYTtBQUNBLFFBQUEsa0NBQWtDLEdBQUcsNENBQTRDLENBQUE7QUFDakYsUUFBQSxlQUFlLEdBQUcsNENBQTRDLENBQUE7QUFFM0UsMkVBQTJFO0FBQzlELFFBQUEsMEJBQTBCLEdBQUcsNENBQTRDLENBQUE7QUFDekUsUUFBQSwwQkFBMEIsR0FBRyw0Q0FBNEMsQ0FBQTtBQUN6RSxRQUFBLDRCQUE0QixHQUFHLDRDQUE0QyxDQUFBO0FBRWpGLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxPQUFlLEVBQUUsUUFBYSxFQUFFLEVBQUUsQ0FDbEUsOEJBQWtCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBRC9ELFFBQUEsaUJBQWlCLHFCQUM4QztBQUU1RSxnREFBZ0Q7QUFDekMsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxjQUF3QixFQUFFLEVBQUU7SUFDM0UsTUFBTSxrQkFBa0IsR0FBRyxnQ0FBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBQ25FLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxjQUFjLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLENBQUE7SUFDdEYsTUFBTSxZQUFZLEdBQ2hCLG1CQUFtQixLQUFLLGtCQUFTLENBQUMsV0FBVztRQUMzQyxDQUFDLENBQUMsbUJBQW1CO1FBQ3JCLENBQUMsQ0FBQyxNQUFNLGNBQWMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUV6RCxNQUFNLGdCQUFnQixHQUFHLElBQUksaUJBQVEsQ0FBQyxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFFL0UsT0FBTyxnQkFBZ0IsQ0FBQTtBQUN6QixDQUFDLENBQUE7QUFYWSxRQUFBLFVBQVUsY0FXdEI7QUFFTSxNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxpQkFBUSxDQUFDLHVCQUFlLEVBQUUsZ0NBQW9CLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUE7QUFBdEcsUUFBQSxTQUFTLGFBQTZGO0FBRTVHLE1BQU0sU0FBUyxHQUFHLEtBQUssRUFDNUIsT0FBZ0IsRUFDaEIsT0FBaUIsRUFDakIsU0FBNkIsRUFDN0IsTUFBb0IsRUFDcEIsRUFBRTtJQUNGLE1BQU0sS0FBSyxHQUFHLGtCQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3BDLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUMzRixNQUFNLHlDQUF5QixDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUseUJBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNoRSxDQUFDLENBQUE7QUFUWSxRQUFBLFNBQVMsYUFTckI7QUFFTSxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQzdCLE9BQWdCLEVBQ2hCLE9BQWlCLEVBQ2pCLFNBQTZCLEVBQzdCLE1BQW9CLEVBQ3BCLEVBQUU7SUFDRixNQUFNLEtBQUssR0FBRyxrQkFBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNwQyxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7SUFDN0YsTUFBTSx5Q0FBeUIsQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFLHlCQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDaEUsQ0FBQyxDQUFBO0FBVFksUUFBQSxVQUFVLGNBU3RCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udHJhY3QsIFdhbGxldCwgY29uc3RhbnRzLCBCaWdOdW1iZXJpc2gsIEJpZ051bWJlciB9IGZyb20gJ2V0aGVycydcbmltcG9ydCB7IGdldENvbnRyYWN0RmFjdG9yeSwgZ2V0Q29udHJhY3RJbnRlcmZhY2UgfSBmcm9tICdAZXRoLW9wdGltaXNtL2NvbnRyYWN0cydcbmltcG9ydCB7IFdhdGNoZXIgfSBmcm9tICdAZXRoLW9wdGltaXNtL2NvcmUtdXRpbHMnXG5pbXBvcnQgeyBEaXJlY3Rpb24sIHdhaXRGb3JYRG9tYWluVHJhbnNhY3Rpb24gfSBmcm9tICcuL3dhdGNoZXItdXRpbHMnXG5cbi8vIFByZWRlcGxveXNcbmV4cG9ydCBjb25zdCBQUk9YWV9TRVFVRU5DRVJfRU5UUllQT0lOVF9BRERSRVNTID0gJzB4NDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNCdcbmV4cG9ydCBjb25zdCBPVk1fRVRIX0FERFJFU1MgPSAnMHg0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2J1xuXG4vLyBUaGUgYWRkcmVzcyBtYW5hZ2VyIGlzIGFsd2F5cyBhdCB0aGUgc2FtZSBhZGRyZXNzIGluIHRlc3RuZXQgZGVwbG95bWVudHNcbmV4cG9ydCBjb25zdCBMT0NBTF9BRERSRVNTX01BTkFHRVJfQUREUiA9ICcweDVGYkRCMjMxNTY3OGFmZWNiMzY3ZjAzMmQ5M0Y2NDJmNjQxODBhYTMnXG5leHBvcnQgY29uc3QgS09WQU5fQUREUkVTU19NQU5BR0VSX0FERFIgPSAnMHhGYWYyN2IyNGJhNTRDNjkxMEMxMkNGRjVDOTQ1M0MwZThENjM0ZTA1J1xuZXhwb3J0IGNvbnN0IE1BSU5ORVRfQUREUkVTU19NQU5BR0VSX0FERFIgPSAnMHhkM0VlRDg2NDY0RmYxM0I0QkZEODFhM2JCMWU3NTNiN2NlQkEzQTM5J1xuXG5leHBvcnQgY29uc3QgZ2V0QWRkcmVzc01hbmFnZXIgPSAoYWRkcmVzczogc3RyaW5nLCBwcm92aWRlcjogYW55KSA9PlxuICBnZXRDb250cmFjdEZhY3RvcnkoJ0xpYl9BZGRyZXNzTWFuYWdlcicpLmNvbm5lY3QocHJvdmlkZXIpLmF0dGFjaChhZGRyZXNzKVxuXG4vLyBHZXRzIHRoZSBnYXRld2F5IHVzaW5nIHRoZSBwcm94eSBpZiBhdmFpbGFibGVcbmV4cG9ydCBjb25zdCBnZXRHYXRld2F5ID0gYXN5bmMgKHdhbGxldDogV2FsbGV0LCBBZGRyZXNzTWFuYWdlcjogQ29udHJhY3QpID0+IHtcbiAgY29uc3QgbDFHYXRld2F5SW50ZXJmYWNlID0gZ2V0Q29udHJhY3RJbnRlcmZhY2UoJ09WTV9MMUVUSEdhdGV3YXknKVxuICBjb25zdCBQcm94eUdhdGV3YXlBZGRyZXNzID0gYXdhaXQgQWRkcmVzc01hbmFnZXIuZ2V0QWRkcmVzcygnUHJveHlfX09WTV9MMUVUSEdhdGV3YXknKVxuICBjb25zdCBhZGRyZXNzVG9Vc2UgPVxuICAgIFByb3h5R2F0ZXdheUFkZHJlc3MgIT09IGNvbnN0YW50cy5BZGRyZXNzWmVyb1xuICAgICAgPyBQcm94eUdhdGV3YXlBZGRyZXNzXG4gICAgICA6IGF3YWl0IEFkZHJlc3NNYW5hZ2VyLmdldEFkZHJlc3MoJ09WTV9MMUVUSEdhdGV3YXknKVxuXG4gIGNvbnN0IE9WTV9MMUVUSEdhdGV3YXkgPSBuZXcgQ29udHJhY3QoYWRkcmVzc1RvVXNlLCBsMUdhdGV3YXlJbnRlcmZhY2UsIHdhbGxldClcblxuICByZXR1cm4gT1ZNX0wxRVRIR2F0ZXdheVxufVxuXG5leHBvcnQgY29uc3QgZ2V0T3ZtRXRoID0gKHdhbGxldDogV2FsbGV0KSA9PiBuZXcgQ29udHJhY3QoT1ZNX0VUSF9BRERSRVNTLCBnZXRDb250cmFjdEludGVyZmFjZSgnT1ZNX0VUSCcpLCB3YWxsZXQpXG5cbmV4cG9ydCBjb25zdCBkZXBvc2l0TDIgPSBhc3luYyAoXG4gIHdhdGNoZXI6IFdhdGNoZXIsXG4gIGdhdGV3YXk6IENvbnRyYWN0LFxuICByZWNpcGllbnQ6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4pID0+IHtcbiAgY29uc3QgdmFsdWUgPSBCaWdOdW1iZXIuZnJvbShhbW91bnQpXG4gIGNvbnN0IHR4ID0gcmVjaXBpZW50ID8gZ2F0ZXdheS5kZXBvc2l0VG8ocmVjaXBpZW50LCB7IHZhbHVlIH0pIDogZ2F0ZXdheS5kZXBvc2l0KHsgdmFsdWUgfSlcbiAgYXdhaXQgd2FpdEZvclhEb21haW5UcmFuc2FjdGlvbih3YXRjaGVyLCB0eCwgRGlyZWN0aW9uLkwxVG9MMilcbn1cblxuZXhwb3J0IGNvbnN0IHdpdGhkcmF3TDEgPSBhc3luYyAoXG4gIHdhdGNoZXI6IFdhdGNoZXIsXG4gIGdhdGV3YXk6IENvbnRyYWN0LFxuICByZWNpcGllbnQ6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4pID0+IHtcbiAgY29uc3QgdmFsdWUgPSBCaWdOdW1iZXIuZnJvbShhbW91bnQpXG4gIGNvbnN0IHR4ID0gcmVjaXBpZW50ID8gZ2F0ZXdheS53aXRoZHJhd1RvKHJlY2lwaWVudCwgeyB2YWx1ZSB9KSA6IGdhdGV3YXkud2l0aGRyYXcoeyB2YWx1ZSB9KVxuICBhd2FpdCB3YWl0Rm9yWERvbWFpblRyYW5zYWN0aW9uKHdhdGNoZXIsIHR4LCBEaXJlY3Rpb24uTDFUb0wyKVxufVxuIl19