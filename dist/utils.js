"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fundUser = exports.getOvmEth = exports.getGateway = exports.getAddressManager = exports.MAINNET_ADDRESS_MANAGER_ADDR = exports.KOVAN_ADDRESS_MANAGER_ADDR = exports.LOCAL_ADDRESS_MANAGER_ADDR = exports.OVM_ETH_ADDRESS = exports.PROXY_SEQUENCER_ENTRYPOINT_ADDRESS = void 0;
const ethers_1 = require("ethers");
const contracts_1 = require("@eth-optimism/contracts");
const watcher_utils_1 = require("./watcher-utils");
// Predeploys
exports.PROXY_SEQUENCER_ENTRYPOINT_ADDRESS = '0x4200000000000000000000000000000000000004';
exports.OVM_ETH_ADDRESS = '0x4200000000000000000000000000000000000006';
// The address manager is always at the same address in testnet deployments
exports.LOCAL_ADDRESS_MANAGER_ADDR = '0x5FbDB2315678afecb367f032d93F642f64180aa3';
exports.KOVAN_ADDRESS_MANAGER_ADDR = '0xFaf27b24ba54C6910C12CFF5C9453C0e8D634e05';
exports.MAINNET_ADDRESS_MANAGER_ADDR = '0xd3EeD86464Ff13B4BFD81a3bB1e753b7ceBA3A39';
const getAddressManager = (address, provider) => contracts_1.getContractFactory('Lib_AddressManager').connect(provider).attach(address);
exports.getAddressManager = getAddressManager;
// Gets the gateway using the proxy if available
const getGateway = async (wallet, AddressManager) => {
    const l1GatewayInterface = contracts_1.getContractInterface('OVM_L1ETHGateway');
    const ProxyGatewayAddress = await AddressManager.getAddress('Proxy__OVM_L1ETHGateway');
    const addressToUse = ProxyGatewayAddress !== ethers_1.constants.AddressZero
        ? ProxyGatewayAddress
        : await AddressManager.getAddress('OVM_L1ETHGateway');
    const OVM_L1ETHGateway = new ethers_1.Contract(addressToUse, l1GatewayInterface, wallet);
    return OVM_L1ETHGateway;
};
exports.getGateway = getGateway;
const getOvmEth = (wallet) => new ethers_1.Contract(exports.OVM_ETH_ADDRESS, contracts_1.getContractInterface('OVM_ETH'), wallet);
exports.getOvmEth = getOvmEth;
const fundUser = async (watcher, gateway, recipient, amount) => {
    const value = ethers_1.BigNumber.from(amount);
    const tx = recipient ? gateway.depositTo(recipient, { value }) : gateway.deposit({ value });
    await watcher_utils_1.waitForXDomainTransaction(watcher, tx, watcher_utils_1.Direction.L1ToL2);
};
exports.fundUser = fundUser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQTZFO0FBQzdFLHVEQUFrRjtBQUVsRixtREFBc0U7QUFFdEUsYUFBYTtBQUNBLFFBQUEsa0NBQWtDLEdBQUcsNENBQTRDLENBQUE7QUFDakYsUUFBQSxlQUFlLEdBQUcsNENBQTRDLENBQUE7QUFFM0UsMkVBQTJFO0FBQzlELFFBQUEsMEJBQTBCLEdBQUcsNENBQTRDLENBQUE7QUFDekUsUUFBQSwwQkFBMEIsR0FBRyw0Q0FBNEMsQ0FBQTtBQUN6RSxRQUFBLDRCQUE0QixHQUFHLDRDQUE0QyxDQUFBO0FBRWpGLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxPQUFlLEVBQUUsUUFBYSxFQUFFLEVBQUUsQ0FDbEUsOEJBQWtCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBRC9ELFFBQUEsaUJBQWlCLHFCQUM4QztBQUU1RSxnREFBZ0Q7QUFDekMsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxjQUF3QixFQUFFLEVBQUU7SUFDM0UsTUFBTSxrQkFBa0IsR0FBRyxnQ0FBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBQ25FLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxjQUFjLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLENBQUE7SUFDdEYsTUFBTSxZQUFZLEdBQ2hCLG1CQUFtQixLQUFLLGtCQUFTLENBQUMsV0FBVztRQUMzQyxDQUFDLENBQUMsbUJBQW1CO1FBQ3JCLENBQUMsQ0FBQyxNQUFNLGNBQWMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUV6RCxNQUFNLGdCQUFnQixHQUFHLElBQUksaUJBQVEsQ0FBQyxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFFL0UsT0FBTyxnQkFBZ0IsQ0FBQTtBQUN6QixDQUFDLENBQUE7QUFYWSxRQUFBLFVBQVUsY0FXdEI7QUFFTSxNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxpQkFBUSxDQUFDLHVCQUFlLEVBQUUsZ0NBQW9CLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUE7QUFBdEcsUUFBQSxTQUFTLGFBQTZGO0FBRTVHLE1BQU0sUUFBUSxHQUFHLEtBQUssRUFDM0IsT0FBZ0IsRUFDaEIsT0FBaUIsRUFDakIsU0FBNkIsRUFDN0IsTUFBb0IsRUFDcEIsRUFBRTtJQUNGLE1BQU0sS0FBSyxHQUFHLGtCQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3BDLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUMzRixNQUFNLHlDQUF5QixDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUseUJBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNoRSxDQUFDLENBQUE7QUFUWSxRQUFBLFFBQVEsWUFTcEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cmFjdCwgV2FsbGV0LCBjb25zdGFudHMsIEJpZ051bWJlcmlzaCwgQmlnTnVtYmVyIH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IHsgZ2V0Q29udHJhY3RGYWN0b3J5LCBnZXRDb250cmFjdEludGVyZmFjZSB9IGZyb20gJ0BldGgtb3B0aW1pc20vY29udHJhY3RzJ1xuaW1wb3J0IHsgV2F0Y2hlciB9IGZyb20gJy4vd2F0Y2hlcidcbmltcG9ydCB7IERpcmVjdGlvbiwgd2FpdEZvclhEb21haW5UcmFuc2FjdGlvbiB9IGZyb20gJy4vd2F0Y2hlci11dGlscydcblxuLy8gUHJlZGVwbG95c1xuZXhwb3J0IGNvbnN0IFBST1hZX1NFUVVFTkNFUl9FTlRSWVBPSU5UX0FERFJFU1MgPSAnMHg0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0J1xuZXhwb3J0IGNvbnN0IE9WTV9FVEhfQUREUkVTUyA9ICcweDQyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDYnXG5cbi8vIFRoZSBhZGRyZXNzIG1hbmFnZXIgaXMgYWx3YXlzIGF0IHRoZSBzYW1lIGFkZHJlc3MgaW4gdGVzdG5ldCBkZXBsb3ltZW50c1xuZXhwb3J0IGNvbnN0IExPQ0FMX0FERFJFU1NfTUFOQUdFUl9BRERSID0gJzB4NUZiREIyMzE1Njc4YWZlY2IzNjdmMDMyZDkzRjY0MmY2NDE4MGFhMydcbmV4cG9ydCBjb25zdCBLT1ZBTl9BRERSRVNTX01BTkFHRVJfQUREUiA9ICcweEZhZjI3YjI0YmE1NEM2OTEwQzEyQ0ZGNUM5NDUzQzBlOEQ2MzRlMDUnXG5leHBvcnQgY29uc3QgTUFJTk5FVF9BRERSRVNTX01BTkFHRVJfQUREUiA9ICcweGQzRWVEODY0NjRGZjEzQjRCRkQ4MWEzYkIxZTc1M2I3Y2VCQTNBMzknXG5cbmV4cG9ydCBjb25zdCBnZXRBZGRyZXNzTWFuYWdlciA9IChhZGRyZXNzOiBzdHJpbmcsIHByb3ZpZGVyOiBhbnkpID0+XG4gIGdldENvbnRyYWN0RmFjdG9yeSgnTGliX0FkZHJlc3NNYW5hZ2VyJykuY29ubmVjdChwcm92aWRlcikuYXR0YWNoKGFkZHJlc3MpXG5cbi8vIEdldHMgdGhlIGdhdGV3YXkgdXNpbmcgdGhlIHByb3h5IGlmIGF2YWlsYWJsZVxuZXhwb3J0IGNvbnN0IGdldEdhdGV3YXkgPSBhc3luYyAod2FsbGV0OiBXYWxsZXQsIEFkZHJlc3NNYW5hZ2VyOiBDb250cmFjdCkgPT4ge1xuICBjb25zdCBsMUdhdGV3YXlJbnRlcmZhY2UgPSBnZXRDb250cmFjdEludGVyZmFjZSgnT1ZNX0wxRVRIR2F0ZXdheScpXG4gIGNvbnN0IFByb3h5R2F0ZXdheUFkZHJlc3MgPSBhd2FpdCBBZGRyZXNzTWFuYWdlci5nZXRBZGRyZXNzKCdQcm94eV9fT1ZNX0wxRVRIR2F0ZXdheScpXG4gIGNvbnN0IGFkZHJlc3NUb1VzZSA9XG4gICAgUHJveHlHYXRld2F5QWRkcmVzcyAhPT0gY29uc3RhbnRzLkFkZHJlc3NaZXJvXG4gICAgICA/IFByb3h5R2F0ZXdheUFkZHJlc3NcbiAgICAgIDogYXdhaXQgQWRkcmVzc01hbmFnZXIuZ2V0QWRkcmVzcygnT1ZNX0wxRVRIR2F0ZXdheScpXG5cbiAgY29uc3QgT1ZNX0wxRVRIR2F0ZXdheSA9IG5ldyBDb250cmFjdChhZGRyZXNzVG9Vc2UsIGwxR2F0ZXdheUludGVyZmFjZSwgd2FsbGV0KVxuXG4gIHJldHVybiBPVk1fTDFFVEhHYXRld2F5XG59XG5cbmV4cG9ydCBjb25zdCBnZXRPdm1FdGggPSAod2FsbGV0OiBXYWxsZXQpID0+IG5ldyBDb250cmFjdChPVk1fRVRIX0FERFJFU1MsIGdldENvbnRyYWN0SW50ZXJmYWNlKCdPVk1fRVRIJyksIHdhbGxldClcblxuZXhwb3J0IGNvbnN0IGZ1bmRVc2VyID0gYXN5bmMgKFxuICB3YXRjaGVyOiBXYXRjaGVyLFxuICBnYXRld2F5OiBDb250cmFjdCxcbiAgcmVjaXBpZW50OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gQmlnTnVtYmVyLmZyb20oYW1vdW50KVxuICBjb25zdCB0eCA9IHJlY2lwaWVudCA/IGdhdGV3YXkuZGVwb3NpdFRvKHJlY2lwaWVudCwgeyB2YWx1ZSB9KSA6IGdhdGV3YXkuZGVwb3NpdCh7IHZhbHVlIH0pXG4gIGF3YWl0IHdhaXRGb3JYRG9tYWluVHJhbnNhY3Rpb24od2F0Y2hlciwgdHgsIERpcmVjdGlvbi5MMVRvTDIpXG59XG4iXX0=