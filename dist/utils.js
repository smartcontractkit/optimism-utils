"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withdrawL1 = exports.depositL2 = exports.getOvmEth = exports.getL2Bridge = exports.getL1Bridge = exports.getAddressManager = exports.MAINNET_ADDRESS_MANAGER_ADDR = exports.KOVAN_ADDRESS_MANAGER_ADDR = exports.LOCAL_ADDRESS_MANAGER_ADDR = exports.OVM_ETH_ADDRESS = exports.PROXY_SEQUENCER_ENTRYPOINT_ADDRESS = void 0;
const ethers_1 = require("ethers");
const contracts_1 = require("@eth-optimism/contracts");
const watcher_utils_1 = require("./watcher-utils");
// Predeploys
exports.PROXY_SEQUENCER_ENTRYPOINT_ADDRESS = '0x4200000000000000000000000000000000000004';
exports.OVM_ETH_ADDRESS = '0x4200000000000000000000000000000000000006';
// The address manager is always at the same address in testnet deployments
exports.LOCAL_ADDRESS_MANAGER_ADDR = '0x5FbDB2315678afecb367f032d93F642f64180aa3';
exports.KOVAN_ADDRESS_MANAGER_ADDR = '0xFaf27b24ba54C6910C12CFF5C9453C0e8D634e05';
exports.MAINNET_ADDRESS_MANAGER_ADDR = '0xd3EeD86464Ff13B4BFD81a3bB1e753b7ceBA3A39';
const getAddressManager = (address, provider) => contracts_1.getContractFactory('Lib_AddressManager').connect(provider).attach(address);
exports.getAddressManager = getAddressManager;
// Gets the bridge contract
const getL1Bridge = async (wallet, AddressManager) => {
    const l1BridgeInterface = contracts_1.getContractInterface('OVM_L1StandardBridge');
    const ProxyBridgeAddress = await AddressManager.getAddress('Proxy__OVM_L1StandardBridge');
    if (!ethers_1.utils.isAddress(ProxyBridgeAddress) || ProxyBridgeAddress === ethers_1.constants.AddressZero) {
        throw new Error('Proxy__OVM_L1StandardBridge not found');
    }
    const OVM_L1StandardBridge = new ethers_1.Contract(ProxyBridgeAddress, l1BridgeInterface, wallet);
    return OVM_L1StandardBridge;
};
exports.getL1Bridge = getL1Bridge;
const getL2Bridge = async (wallet) => {
    const L2BridgeInterface = contracts_1.getContractInterface('OVM_L2StandardBridge');
    const OVM_L2StandardBridge = new ethers_1.Contract(contracts_1.predeploys.OVM_L2StandardBridge, L2BridgeInterface, wallet);
    return OVM_L2StandardBridge;
};
exports.getL2Bridge = getL2Bridge;
const getOvmEth = (wallet) => {
    const OVM_ETH = new ethers_1.Contract(exports.OVM_ETH_ADDRESS, contracts_1.getContractInterface('OVM_ETH'), wallet);
    return OVM_ETH;
};
exports.getOvmEth = getOvmEth;
const depositL2 = async (watcher, gateway, recipient, amount) => {
    const value = ethers_1.BigNumber.from(amount);
    const tx = recipient
        ? gateway.depositETHTo(recipient, 1300000, '0x', { value })
        : gateway.depositETH(1300000, '0x', { value });
    await watcher_utils_1.waitForXDomainTransaction(watcher, tx, watcher_utils_1.Direction.L1ToL2);
};
exports.depositL2 = depositL2;
const withdrawL1 = async (watcher, gateway, recipient, amount) => {
    const value = ethers_1.BigNumber.from(amount);
    const tx = recipient ? gateway.withdrawTo(recipient, value, 300000, '') : gateway.withdraw(value, 300000, '');
    await watcher_utils_1.waitForXDomainTransaction(watcher, tx, watcher_utils_1.Direction.L2ToL1);
};
exports.withdrawL1 = withdrawL1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW9GO0FBQ3BGLHVEQUE4RjtBQUU5RixtREFBc0U7QUFFdEUsYUFBYTtBQUNBLFFBQUEsa0NBQWtDLEdBQUcsNENBQTRDLENBQUE7QUFDakYsUUFBQSxlQUFlLEdBQUcsNENBQTRDLENBQUE7QUFFM0UsMkVBQTJFO0FBQzlELFFBQUEsMEJBQTBCLEdBQUcsNENBQTRDLENBQUE7QUFDekUsUUFBQSwwQkFBMEIsR0FBRyw0Q0FBNEMsQ0FBQTtBQUN6RSxRQUFBLDRCQUE0QixHQUFHLDRDQUE0QyxDQUFBO0FBRWpGLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxPQUFlLEVBQUUsUUFBYSxFQUFFLEVBQUUsQ0FDbEUsOEJBQWtCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBRC9ELFFBQUEsaUJBQWlCLHFCQUM4QztBQUU1RSwyQkFBMkI7QUFDcEIsTUFBTSxXQUFXLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxjQUF3QixFQUFFLEVBQUU7SUFDNUUsTUFBTSxpQkFBaUIsR0FBRyxnQ0FBb0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBO0lBQ3RFLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxjQUFjLENBQUMsVUFBVSxDQUFDLDZCQUE2QixDQUFDLENBQUE7SUFFekYsSUFBSSxDQUFDLGNBQUssQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsSUFBSSxrQkFBa0IsS0FBSyxrQkFBUyxDQUFDLFdBQVcsRUFBRTtRQUN4RixNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUE7S0FDekQ7SUFFRCxNQUFNLG9CQUFvQixHQUFHLElBQUksaUJBQVEsQ0FBQyxrQkFBa0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUN4RixPQUFPLG9CQUFvQixDQUFBO0FBQzdCLENBQUMsQ0FBQTtBQVZZLFFBQUEsV0FBVyxlQVV2QjtBQUVNLE1BQU0sV0FBVyxHQUFHLEtBQUssRUFBRSxNQUFjLEVBQUUsRUFBRTtJQUNsRCxNQUFNLGlCQUFpQixHQUFHLGdDQUFvQixDQUFDLHNCQUFzQixDQUFDLENBQUE7SUFFdEUsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLGlCQUFRLENBQUMsc0JBQVUsQ0FBQyxvQkFBb0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNyRyxPQUFPLG9CQUFvQixDQUFBO0FBQzdCLENBQUMsQ0FBQTtBQUxZLFFBQUEsV0FBVyxlQUt2QjtBQUVNLE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUU7SUFDMUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBUSxDQUFDLHVCQUFlLEVBQUUsZ0NBQW9CLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFFdEYsT0FBTyxPQUFPLENBQUE7QUFDaEIsQ0FBQyxDQUFBO0FBSlksUUFBQSxTQUFTLGFBSXJCO0FBRU0sTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUM1QixPQUFnQixFQUNoQixPQUFpQixFQUNqQixTQUE2QixFQUM3QixNQUFvQixFQUNwQixFQUFFO0lBQ0YsTUFBTSxLQUFLLEdBQUcsa0JBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDcEMsTUFBTSxFQUFFLEdBQUcsU0FBUztRQUNsQixDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsT0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQzdELENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBQ2xELE1BQU0seUNBQXlCLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSx5QkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ2hFLENBQUMsQ0FBQTtBQVhZLFFBQUEsU0FBUyxhQVdyQjtBQUVNLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFDN0IsT0FBZ0IsRUFDaEIsT0FBaUIsRUFDakIsU0FBNkIsRUFDN0IsTUFBb0IsRUFDcEIsRUFBRTtJQUNGLE1BQU0sS0FBSyxHQUFHLGtCQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3BDLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQy9HLE1BQU0seUNBQXlCLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSx5QkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ2hFLENBQUMsQ0FBQTtBQVRZLFFBQUEsVUFBVSxjQVN0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRyYWN0LCBXYWxsZXQsIGNvbnN0YW50cywgQmlnTnVtYmVyaXNoLCBCaWdOdW1iZXIsIHV0aWxzIH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IHsgZ2V0Q29udHJhY3RGYWN0b3J5LCBnZXRDb250cmFjdEludGVyZmFjZSwgcHJlZGVwbG95cyB9IGZyb20gJ0BldGgtb3B0aW1pc20vY29udHJhY3RzJ1xuaW1wb3J0IHsgV2F0Y2hlciB9IGZyb20gJ0BldGgtb3B0aW1pc20vY29yZS11dGlscydcbmltcG9ydCB7IERpcmVjdGlvbiwgd2FpdEZvclhEb21haW5UcmFuc2FjdGlvbiB9IGZyb20gJy4vd2F0Y2hlci11dGlscydcblxuLy8gUHJlZGVwbG95c1xuZXhwb3J0IGNvbnN0IFBST1hZX1NFUVVFTkNFUl9FTlRSWVBPSU5UX0FERFJFU1MgPSAnMHg0MjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA0J1xuZXhwb3J0IGNvbnN0IE9WTV9FVEhfQUREUkVTUyA9ICcweDQyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDYnXG5cbi8vIFRoZSBhZGRyZXNzIG1hbmFnZXIgaXMgYWx3YXlzIGF0IHRoZSBzYW1lIGFkZHJlc3MgaW4gdGVzdG5ldCBkZXBsb3ltZW50c1xuZXhwb3J0IGNvbnN0IExPQ0FMX0FERFJFU1NfTUFOQUdFUl9BRERSID0gJzB4NUZiREIyMzE1Njc4YWZlY2IzNjdmMDMyZDkzRjY0MmY2NDE4MGFhMydcbmV4cG9ydCBjb25zdCBLT1ZBTl9BRERSRVNTX01BTkFHRVJfQUREUiA9ICcweEZhZjI3YjI0YmE1NEM2OTEwQzEyQ0ZGNUM5NDUzQzBlOEQ2MzRlMDUnXG5leHBvcnQgY29uc3QgTUFJTk5FVF9BRERSRVNTX01BTkFHRVJfQUREUiA9ICcweGQzRWVEODY0NjRGZjEzQjRCRkQ4MWEzYkIxZTc1M2I3Y2VCQTNBMzknXG5cbmV4cG9ydCBjb25zdCBnZXRBZGRyZXNzTWFuYWdlciA9IChhZGRyZXNzOiBzdHJpbmcsIHByb3ZpZGVyOiBhbnkpID0+XG4gIGdldENvbnRyYWN0RmFjdG9yeSgnTGliX0FkZHJlc3NNYW5hZ2VyJykuY29ubmVjdChwcm92aWRlcikuYXR0YWNoKGFkZHJlc3MpXG5cbi8vIEdldHMgdGhlIGJyaWRnZSBjb250cmFjdFxuZXhwb3J0IGNvbnN0IGdldEwxQnJpZGdlID0gYXN5bmMgKHdhbGxldDogV2FsbGV0LCBBZGRyZXNzTWFuYWdlcjogQ29udHJhY3QpID0+IHtcbiAgY29uc3QgbDFCcmlkZ2VJbnRlcmZhY2UgPSBnZXRDb250cmFjdEludGVyZmFjZSgnT1ZNX0wxU3RhbmRhcmRCcmlkZ2UnKVxuICBjb25zdCBQcm94eUJyaWRnZUFkZHJlc3MgPSBhd2FpdCBBZGRyZXNzTWFuYWdlci5nZXRBZGRyZXNzKCdQcm94eV9fT1ZNX0wxU3RhbmRhcmRCcmlkZ2UnKVxuXG4gIGlmICghdXRpbHMuaXNBZGRyZXNzKFByb3h5QnJpZGdlQWRkcmVzcykgfHwgUHJveHlCcmlkZ2VBZGRyZXNzID09PSBjb25zdGFudHMuQWRkcmVzc1plcm8pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3h5X19PVk1fTDFTdGFuZGFyZEJyaWRnZSBub3QgZm91bmQnKVxuICB9XG5cbiAgY29uc3QgT1ZNX0wxU3RhbmRhcmRCcmlkZ2UgPSBuZXcgQ29udHJhY3QoUHJveHlCcmlkZ2VBZGRyZXNzLCBsMUJyaWRnZUludGVyZmFjZSwgd2FsbGV0KVxuICByZXR1cm4gT1ZNX0wxU3RhbmRhcmRCcmlkZ2Vcbn1cblxuZXhwb3J0IGNvbnN0IGdldEwyQnJpZGdlID0gYXN5bmMgKHdhbGxldDogV2FsbGV0KSA9PiB7XG4gIGNvbnN0IEwyQnJpZGdlSW50ZXJmYWNlID0gZ2V0Q29udHJhY3RJbnRlcmZhY2UoJ09WTV9MMlN0YW5kYXJkQnJpZGdlJylcblxuICBjb25zdCBPVk1fTDJTdGFuZGFyZEJyaWRnZSA9IG5ldyBDb250cmFjdChwcmVkZXBsb3lzLk9WTV9MMlN0YW5kYXJkQnJpZGdlLCBMMkJyaWRnZUludGVyZmFjZSwgd2FsbGV0KVxuICByZXR1cm4gT1ZNX0wyU3RhbmRhcmRCcmlkZ2Vcbn1cblxuZXhwb3J0IGNvbnN0IGdldE92bUV0aCA9ICh3YWxsZXQ6IFdhbGxldCkgPT4ge1xuICBjb25zdCBPVk1fRVRIID0gbmV3IENvbnRyYWN0KE9WTV9FVEhfQUREUkVTUywgZ2V0Q29udHJhY3RJbnRlcmZhY2UoJ09WTV9FVEgnKSwgd2FsbGV0KVxuXG4gIHJldHVybiBPVk1fRVRIXG59XG5cbmV4cG9ydCBjb25zdCBkZXBvc2l0TDIgPSBhc3luYyAoXG4gIHdhdGNoZXI6IFdhdGNoZXIsXG4gIGdhdGV3YXk6IENvbnRyYWN0LFxuICByZWNpcGllbnQ6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgYW1vdW50OiBCaWdOdW1iZXJpc2gsXG4pID0+IHtcbiAgY29uc3QgdmFsdWUgPSBCaWdOdW1iZXIuZnJvbShhbW91bnQpXG4gIGNvbnN0IHR4ID0gcmVjaXBpZW50XG4gICAgPyBnYXRld2F5LmRlcG9zaXRFVEhUbyhyZWNpcGllbnQsIDFfMzAwXzAwMCwgJzB4JywgeyB2YWx1ZSB9KVxuICAgIDogZ2F0ZXdheS5kZXBvc2l0RVRIKDFfMzAwXzAwMCwgJzB4JywgeyB2YWx1ZSB9KVxuICBhd2FpdCB3YWl0Rm9yWERvbWFpblRyYW5zYWN0aW9uKHdhdGNoZXIsIHR4LCBEaXJlY3Rpb24uTDFUb0wyKVxufVxuXG5leHBvcnQgY29uc3Qgd2l0aGRyYXdMMSA9IGFzeW5jIChcbiAgd2F0Y2hlcjogV2F0Y2hlcixcbiAgZ2F0ZXdheTogQ29udHJhY3QsXG4gIHJlY2lwaWVudDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICBhbW91bnQ6IEJpZ051bWJlcmlzaCxcbikgPT4ge1xuICBjb25zdCB2YWx1ZSA9IEJpZ051bWJlci5mcm9tKGFtb3VudClcbiAgY29uc3QgdHggPSByZWNpcGllbnQgPyBnYXRld2F5LndpdGhkcmF3VG8ocmVjaXBpZW50LCB2YWx1ZSwgMzAwXzAwMCwgJycpIDogZ2F0ZXdheS53aXRoZHJhdyh2YWx1ZSwgMzAwXzAwMCwgJycpXG4gIGF3YWl0IHdhaXRGb3JYRG9tYWluVHJhbnNhY3Rpb24od2F0Y2hlciwgdHgsIERpcmVjdGlvbi5MMlRvTDEpXG59XG4iXX0=