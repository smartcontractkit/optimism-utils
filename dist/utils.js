"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withdrawL1 = exports.depositL2 = exports.getOvmEth = exports.getGateway = exports.getAddressManager = exports.MAINNET_ADDRESS_MANAGER_ADDR = exports.KOVAN_ADDRESS_MANAGER_ADDR = exports.LOCAL_ADDRESS_MANAGER_ADDR = exports.OVM_ETH_ADDRESS = exports.PROXY_SEQUENCER_ENTRYPOINT_ADDRESS = void 0;
const ethers_1 = require("ethers");
const contracts_1 = require("@eth-optimism/contracts");
const watcher_utils_1 = require("./watcher-utils");
// Predeploys
exports.PROXY_SEQUENCER_ENTRYPOINT_ADDRESS = '0x4200000000000000000000000000000000000004';
exports.OVM_ETH_ADDRESS = '0x4200000000000000000000000000000000000006';
// The address manager is always at the same address in testnet deployments
exports.LOCAL_ADDRESS_MANAGER_ADDR = '0x5FbDB2315678afecb367f032d93F642f64180aa3';
exports.KOVAN_ADDRESS_MANAGER_ADDR = '0xFaf27b24ba54C6910C12CFF5C9453C0e8D634e05';
exports.MAINNET_ADDRESS_MANAGER_ADDR = '0xd3EeD86464Ff13B4BFD81a3bB1e753b7ceBA3A39';
const getAddressManager = (address, provider) => contracts_1.getContractFactory('Lib_AddressManager').connect(provider).attach(address);
exports.getAddressManager = getAddressManager;
// Gets the gateway using the proxy if available
const getGateway = async (wallet, AddressManager) => {
    const l1GatewayInterface = contracts_1.getContractInterface('OVM_L1ETHGateway');
    const ProxyGatewayAddress = await AddressManager.getAddress('Proxy__OVM_L1ETHGateway');
    const addressToUse = ProxyGatewayAddress !== ethers_1.constants.AddressZero
        ? ProxyGatewayAddress
        : await AddressManager.getAddress('OVM_L1ETHGateway');
    const OVM_L1ETHGateway = new ethers_1.Contract(addressToUse, l1GatewayInterface, wallet);
    return OVM_L1ETHGateway;
};
exports.getGateway = getGateway;
const getOvmEth = (wallet) => new ethers_1.Contract(exports.OVM_ETH_ADDRESS, contracts_1.getContractInterface('OVM_ETH'), wallet);
exports.getOvmEth = getOvmEth;
const depositL2 = async (watcher, gateway, recipient, amount) => {
    const value = ethers_1.BigNumber.from(amount);
    const tx = recipient ? gateway.depositTo(recipient, { value }) : gateway.deposit({ value });
    await watcher_utils_1.waitForXDomainTransaction(watcher, tx, watcher_utils_1.Direction.L1ToL2);
};
exports.depositL2 = depositL2;
const withdrawL1 = async (watcher, gateway, recipient, amount) => {
    const value = ethers_1.BigNumber.from(amount);
    const tx = recipient ? gateway.withdrawTo(recipient, value) : gateway.withdraw(value);
    await watcher_utils_1.waitForXDomainTransaction(watcher, tx, watcher_utils_1.Direction.L2ToL1);
};
exports.withdrawL1 = withdrawL1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQTZFO0FBQzdFLHVEQUFrRjtBQUVsRixtREFBc0U7QUFFdEUsYUFBYTtBQUNBLFFBQUEsa0NBQWtDLEdBQUcsNENBQTRDLENBQUE7QUFDakYsUUFBQSxlQUFlLEdBQUcsNENBQTRDLENBQUE7QUFFM0UsMkVBQTJFO0FBQzlELFFBQUEsMEJBQTBCLEdBQUcsNENBQTRDLENBQUE7QUFDekUsUUFBQSwwQkFBMEIsR0FBRyw0Q0FBNEMsQ0FBQTtBQUN6RSxRQUFBLDRCQUE0QixHQUFHLDRDQUE0QyxDQUFBO0FBRWpGLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxPQUFlLEVBQUUsUUFBYSxFQUFFLEVBQUUsQ0FDbEUsOEJBQWtCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBRC9ELFFBQUEsaUJBQWlCLHFCQUM4QztBQUU1RSxnREFBZ0Q7QUFDekMsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxjQUF3QixFQUFFLEVBQUU7SUFDM0UsTUFBTSxrQkFBa0IsR0FBRyxnQ0FBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBQ25FLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxjQUFjLENBQUMsVUFBVSxDQUFDLHlCQUF5QixDQUFDLENBQUE7SUFDdEYsTUFBTSxZQUFZLEdBQ2hCLG1CQUFtQixLQUFLLGtCQUFTLENBQUMsV0FBVztRQUMzQyxDQUFDLENBQUMsbUJBQW1CO1FBQ3JCLENBQUMsQ0FBQyxNQUFNLGNBQWMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUV6RCxNQUFNLGdCQUFnQixHQUFHLElBQUksaUJBQVEsQ0FBQyxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFFL0UsT0FBTyxnQkFBZ0IsQ0FBQTtBQUN6QixDQUFDLENBQUE7QUFYWSxRQUFBLFVBQVUsY0FXdEI7QUFFTSxNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxpQkFBUSxDQUFDLHVCQUFlLEVBQUUsZ0NBQW9CLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUE7QUFBdEcsUUFBQSxTQUFTLGFBQTZGO0FBRTVHLE1BQU0sU0FBUyxHQUFHLEtBQUssRUFDNUIsT0FBZ0IsRUFDaEIsT0FBaUIsRUFDakIsU0FBNkIsRUFDN0IsTUFBb0IsRUFDcEIsRUFBRTtJQUNGLE1BQU0sS0FBSyxHQUFHLGtCQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3BDLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUMzRixNQUFNLHlDQUF5QixDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUseUJBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNoRSxDQUFDLENBQUE7QUFUWSxRQUFBLFNBQVMsYUFTckI7QUFFTSxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQzdCLE9BQWdCLEVBQ2hCLE9BQWlCLEVBQ2pCLFNBQTZCLEVBQzdCLE1BQW9CLEVBQ3BCLEVBQUU7SUFDRixNQUFNLEtBQUssR0FBRyxrQkFBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNwQyxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3JGLE1BQU0seUNBQXlCLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSx5QkFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ2hFLENBQUMsQ0FBQTtBQVRZLFFBQUEsVUFBVSxjQVN0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRyYWN0LCBXYWxsZXQsIGNvbnN0YW50cywgQmlnTnVtYmVyaXNoLCBCaWdOdW1iZXIgfSBmcm9tICdldGhlcnMnXG5pbXBvcnQgeyBnZXRDb250cmFjdEZhY3RvcnksIGdldENvbnRyYWN0SW50ZXJmYWNlIH0gZnJvbSAnQGV0aC1vcHRpbWlzbS9jb250cmFjdHMnXG5pbXBvcnQgeyBXYXRjaGVyIH0gZnJvbSAnQGV0aC1vcHRpbWlzbS9jb3JlLXV0aWxzJ1xuaW1wb3J0IHsgRGlyZWN0aW9uLCB3YWl0Rm9yWERvbWFpblRyYW5zYWN0aW9uIH0gZnJvbSAnLi93YXRjaGVyLXV0aWxzJ1xuXG4vLyBQcmVkZXBsb3lzXG5leHBvcnQgY29uc3QgUFJPWFlfU0VRVUVOQ0VSX0VOVFJZUE9JTlRfQUREUkVTUyA9ICcweDQyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQnXG5leHBvcnQgY29uc3QgT1ZNX0VUSF9BRERSRVNTID0gJzB4NDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNidcblxuLy8gVGhlIGFkZHJlc3MgbWFuYWdlciBpcyBhbHdheXMgYXQgdGhlIHNhbWUgYWRkcmVzcyBpbiB0ZXN0bmV0IGRlcGxveW1lbnRzXG5leHBvcnQgY29uc3QgTE9DQUxfQUREUkVTU19NQU5BR0VSX0FERFIgPSAnMHg1RmJEQjIzMTU2NzhhZmVjYjM2N2YwMzJkOTNGNjQyZjY0MTgwYWEzJ1xuZXhwb3J0IGNvbnN0IEtPVkFOX0FERFJFU1NfTUFOQUdFUl9BRERSID0gJzB4RmFmMjdiMjRiYTU0QzY5MTBDMTJDRkY1Qzk0NTNDMGU4RDYzNGUwNSdcbmV4cG9ydCBjb25zdCBNQUlOTkVUX0FERFJFU1NfTUFOQUdFUl9BRERSID0gJzB4ZDNFZUQ4NjQ2NEZmMTNCNEJGRDgxYTNiQjFlNzUzYjdjZUJBM0EzOSdcblxuZXhwb3J0IGNvbnN0IGdldEFkZHJlc3NNYW5hZ2VyID0gKGFkZHJlc3M6IHN0cmluZywgcHJvdmlkZXI6IGFueSkgPT5cbiAgZ2V0Q29udHJhY3RGYWN0b3J5KCdMaWJfQWRkcmVzc01hbmFnZXInKS5jb25uZWN0KHByb3ZpZGVyKS5hdHRhY2goYWRkcmVzcylcblxuLy8gR2V0cyB0aGUgZ2F0ZXdheSB1c2luZyB0aGUgcHJveHkgaWYgYXZhaWxhYmxlXG5leHBvcnQgY29uc3QgZ2V0R2F0ZXdheSA9IGFzeW5jICh3YWxsZXQ6IFdhbGxldCwgQWRkcmVzc01hbmFnZXI6IENvbnRyYWN0KSA9PiB7XG4gIGNvbnN0IGwxR2F0ZXdheUludGVyZmFjZSA9IGdldENvbnRyYWN0SW50ZXJmYWNlKCdPVk1fTDFFVEhHYXRld2F5JylcbiAgY29uc3QgUHJveHlHYXRld2F5QWRkcmVzcyA9IGF3YWl0IEFkZHJlc3NNYW5hZ2VyLmdldEFkZHJlc3MoJ1Byb3h5X19PVk1fTDFFVEhHYXRld2F5JylcbiAgY29uc3QgYWRkcmVzc1RvVXNlID1cbiAgICBQcm94eUdhdGV3YXlBZGRyZXNzICE9PSBjb25zdGFudHMuQWRkcmVzc1plcm9cbiAgICAgID8gUHJveHlHYXRld2F5QWRkcmVzc1xuICAgICAgOiBhd2FpdCBBZGRyZXNzTWFuYWdlci5nZXRBZGRyZXNzKCdPVk1fTDFFVEhHYXRld2F5JylcblxuICBjb25zdCBPVk1fTDFFVEhHYXRld2F5ID0gbmV3IENvbnRyYWN0KGFkZHJlc3NUb1VzZSwgbDFHYXRld2F5SW50ZXJmYWNlLCB3YWxsZXQpXG5cbiAgcmV0dXJuIE9WTV9MMUVUSEdhdGV3YXlcbn1cblxuZXhwb3J0IGNvbnN0IGdldE92bUV0aCA9ICh3YWxsZXQ6IFdhbGxldCkgPT4gbmV3IENvbnRyYWN0KE9WTV9FVEhfQUREUkVTUywgZ2V0Q29udHJhY3RJbnRlcmZhY2UoJ09WTV9FVEgnKSwgd2FsbGV0KVxuXG5leHBvcnQgY29uc3QgZGVwb3NpdEwyID0gYXN5bmMgKFxuICB3YXRjaGVyOiBXYXRjaGVyLFxuICBnYXRld2F5OiBDb250cmFjdCxcbiAgcmVjaXBpZW50OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gQmlnTnVtYmVyLmZyb20oYW1vdW50KVxuICBjb25zdCB0eCA9IHJlY2lwaWVudCA/IGdhdGV3YXkuZGVwb3NpdFRvKHJlY2lwaWVudCwgeyB2YWx1ZSB9KSA6IGdhdGV3YXkuZGVwb3NpdCh7IHZhbHVlIH0pXG4gIGF3YWl0IHdhaXRGb3JYRG9tYWluVHJhbnNhY3Rpb24od2F0Y2hlciwgdHgsIERpcmVjdGlvbi5MMVRvTDIpXG59XG5cbmV4cG9ydCBjb25zdCB3aXRoZHJhd0wxID0gYXN5bmMgKFxuICB3YXRjaGVyOiBXYXRjaGVyLFxuICBnYXRld2F5OiBDb250cmFjdCxcbiAgcmVjaXBpZW50OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIGFtb3VudDogQmlnTnVtYmVyaXNoLFxuKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gQmlnTnVtYmVyLmZyb20oYW1vdW50KVxuICBjb25zdCB0eCA9IHJlY2lwaWVudCA/IGdhdGV3YXkud2l0aGRyYXdUbyhyZWNpcGllbnQsIHZhbHVlKSA6IGdhdGV3YXkud2l0aGRyYXcodmFsdWUpXG4gIGF3YWl0IHdhaXRGb3JYRG9tYWluVHJhbnNhY3Rpb24od2F0Y2hlciwgdHgsIERpcmVjdGlvbi5MMlRvTDEpXG59XG4iXX0=