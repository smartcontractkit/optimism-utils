"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fundUser = exports.getOvmEth = exports.getGateway = exports.getAddressManager = exports.addressManagerAddress = exports.OVM_ETH_ADDRESS = exports.PROXY_SEQUENCER_ENTRYPOINT_ADDRESS = exports.l2Wallet = exports.l1Wallet = exports.l2Provider = exports.l1Provider = exports.GWEI = void 0;
const ethers_1 = require("ethers");
const contracts_1 = require("@eth-optimism/contracts");
const watcher_utils_1 = require("./watcher-utils");
exports.GWEI = ethers_1.BigNumber.from(1e9);
// The hardhat instance
const l1HttpPort = 9545;
exports.l1Provider = new ethers_1.providers.JsonRpcProvider(`http://localhost:${l1HttpPort}`);
exports.l1Provider.pollingInterval = 10;
const httpPort = 8545;
exports.l2Provider = new ethers_1.providers.JsonRpcProvider(`http://localhost:${httpPort}`);
exports.l2Provider.pollingInterval = 10;
// The sequencer private key which is funded on L1
exports.l1Wallet = new ethers_1.Wallet('0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80', exports.l1Provider);
// A random private key which should always be funded with deposits from L1 -> L2
// if it's using non-0 gas price
exports.l2Wallet = exports.l1Wallet.connect(exports.l2Provider);
// Predeploys
exports.PROXY_SEQUENCER_ENTRYPOINT_ADDRESS = '0x4200000000000000000000000000000000000004';
exports.OVM_ETH_ADDRESS = '0x4200000000000000000000000000000000000006';
// The address manager is always at the same address in testnet deployments
exports.addressManagerAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3';
const getAddressManager = (provider) => {
    return contracts_1.getContractFactory('Lib_AddressManager').connect(provider).attach(exports.addressManagerAddress);
};
exports.getAddressManager = getAddressManager;
// Gets the gateway using the proxy if available
const getGateway = async (wallet, AddressManager) => {
    const l1GatewayInterface = contracts_1.getContractInterface('OVM_L1ETHGateway');
    const ProxyGatewayAddress = await AddressManager.getAddress('Proxy__OVM_L1ETHGateway');
    const addressToUse = ProxyGatewayAddress !== ethers_1.constants.AddressZero
        ? ProxyGatewayAddress
        : await AddressManager.getAddress('OVM_L1ETHGateway');
    const OVM_L1ETHGateway = new ethers_1.Contract(addressToUse, l1GatewayInterface, wallet);
    return OVM_L1ETHGateway;
};
exports.getGateway = getGateway;
const getOvmEth = (wallet) => new ethers_1.Contract(exports.OVM_ETH_ADDRESS, contracts_1.getContractInterface('OVM_ETH'), wallet);
exports.getOvmEth = getOvmEth;
const fundUser = async (watcher, gateway, amount, recipient) => {
    const value = ethers_1.BigNumber.from(amount);
    const tx = recipient ? gateway.depositTo(recipient, { value }) : gateway.deposit({ value });
    await watcher_utils_1.waitForXDomainTransaction(watcher, tx, watcher_utils_1.Direction.L1ToL2);
};
exports.fundUser = fundUser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQXdGO0FBQ3hGLHVEQUFrRjtBQUVsRixtREFBc0U7QUFFekQsUUFBQSxJQUFJLEdBQUcsa0JBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7QUFFdkMsdUJBQXVCO0FBQ3ZCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQTtBQUNWLFFBQUEsVUFBVSxHQUFHLElBQUksa0JBQVMsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLFVBQVUsRUFBRSxDQUFDLENBQUE7QUFDekYsa0JBQVUsQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFBO0FBRS9CLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQTtBQUNSLFFBQUEsVUFBVSxHQUFHLElBQUksa0JBQVMsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLFFBQVEsRUFBRSxDQUFDLENBQUE7QUFDdkYsa0JBQVUsQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFBO0FBRS9CLGtEQUFrRDtBQUNyQyxRQUFBLFFBQVEsR0FBRyxJQUFJLGVBQU0sQ0FBQyxvRUFBb0UsRUFBRSxrQkFBVSxDQUFDLENBQUE7QUFFcEgsaUZBQWlGO0FBQ2pGLGdDQUFnQztBQUNuQixRQUFBLFFBQVEsR0FBRyxnQkFBUSxDQUFDLE9BQU8sQ0FBQyxrQkFBVSxDQUFDLENBQUE7QUFFcEQsYUFBYTtBQUNBLFFBQUEsa0NBQWtDLEdBQUcsNENBQTRDLENBQUE7QUFDakYsUUFBQSxlQUFlLEdBQUcsNENBQTRDLENBQUE7QUFFM0UsMkVBQTJFO0FBQzlELFFBQUEscUJBQXFCLEdBQUcsNENBQTRDLENBQUE7QUFFMUUsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFFBQWEsRUFBRSxFQUFFO0lBQ2pELE9BQU8sOEJBQWtCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLDZCQUFxQixDQUFDLENBQUE7QUFDakcsQ0FBQyxDQUFBO0FBRlksUUFBQSxpQkFBaUIscUJBRTdCO0FBRUQsZ0RBQWdEO0FBQ3pDLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxNQUFjLEVBQUUsY0FBd0IsRUFBRSxFQUFFO0lBQzNFLE1BQU0sa0JBQWtCLEdBQUcsZ0NBQW9CLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUNuRSxNQUFNLG1CQUFtQixHQUFHLE1BQU0sY0FBYyxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO0lBQ3RGLE1BQU0sWUFBWSxHQUNoQixtQkFBbUIsS0FBSyxrQkFBUyxDQUFDLFdBQVc7UUFDM0MsQ0FBQyxDQUFDLG1CQUFtQjtRQUNyQixDQUFDLENBQUMsTUFBTSxjQUFjLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUE7SUFFekQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGlCQUFRLENBQUMsWUFBWSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBRS9FLE9BQU8sZ0JBQWdCLENBQUE7QUFDekIsQ0FBQyxDQUFBO0FBWFksUUFBQSxVQUFVLGNBV3RCO0FBRU0sTUFBTSxTQUFTLEdBQUcsQ0FBQyxNQUFjLEVBQUUsRUFBRSxDQUFDLElBQUksaUJBQVEsQ0FBQyx1QkFBZSxFQUFFLGdDQUFvQixDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQXRHLFFBQUEsU0FBUyxhQUE2RjtBQUU1RyxNQUFNLFFBQVEsR0FBRyxLQUFLLEVBQUUsT0FBZ0IsRUFBRSxPQUFpQixFQUFFLE1BQW9CLEVBQUUsU0FBa0IsRUFBRSxFQUFFO0lBQzlHLE1BQU0sS0FBSyxHQUFHLGtCQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3BDLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUMzRixNQUFNLHlDQUF5QixDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUseUJBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNoRSxDQUFDLENBQUE7QUFKWSxRQUFBLFFBQVEsWUFJcEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cmFjdCwgV2FsbGV0LCBjb25zdGFudHMsIHByb3ZpZGVycywgQmlnTnVtYmVyaXNoLCBCaWdOdW1iZXIgfSBmcm9tICdldGhlcnMnXG5pbXBvcnQgeyBnZXRDb250cmFjdEZhY3RvcnksIGdldENvbnRyYWN0SW50ZXJmYWNlIH0gZnJvbSAnQGV0aC1vcHRpbWlzbS9jb250cmFjdHMnXG5pbXBvcnQgeyBXYXRjaGVyIH0gZnJvbSAnLi93YXRjaGVyJ1xuaW1wb3J0IHsgRGlyZWN0aW9uLCB3YWl0Rm9yWERvbWFpblRyYW5zYWN0aW9uIH0gZnJvbSAnLi93YXRjaGVyLXV0aWxzJ1xuXG5leHBvcnQgY29uc3QgR1dFSSA9IEJpZ051bWJlci5mcm9tKDFlOSlcblxuLy8gVGhlIGhhcmRoYXQgaW5zdGFuY2VcbmNvbnN0IGwxSHR0cFBvcnQgPSA5NTQ1XG5leHBvcnQgY29uc3QgbDFQcm92aWRlciA9IG5ldyBwcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKGBodHRwOi8vbG9jYWxob3N0OiR7bDFIdHRwUG9ydH1gKVxubDFQcm92aWRlci5wb2xsaW5nSW50ZXJ2YWwgPSAxMFxuXG5jb25zdCBodHRwUG9ydCA9IDg1NDVcbmV4cG9ydCBjb25zdCBsMlByb3ZpZGVyID0gbmV3IHByb3ZpZGVycy5Kc29uUnBjUHJvdmlkZXIoYGh0dHA6Ly9sb2NhbGhvc3Q6JHtodHRwUG9ydH1gKVxubDJQcm92aWRlci5wb2xsaW5nSW50ZXJ2YWwgPSAxMFxuXG4vLyBUaGUgc2VxdWVuY2VyIHByaXZhdGUga2V5IHdoaWNoIGlzIGZ1bmRlZCBvbiBMMVxuZXhwb3J0IGNvbnN0IGwxV2FsbGV0ID0gbmV3IFdhbGxldCgnMHhhYzA5NzRiZWMzOWExN2UzNmJhNGE2YjRkMjM4ZmY5NDRiYWNiNDc4Y2JlZDVlZmNhZTc4NGQ3YmY0ZjJmZjgwJywgbDFQcm92aWRlcilcblxuLy8gQSByYW5kb20gcHJpdmF0ZSBrZXkgd2hpY2ggc2hvdWxkIGFsd2F5cyBiZSBmdW5kZWQgd2l0aCBkZXBvc2l0cyBmcm9tIEwxIC0+IEwyXG4vLyBpZiBpdCdzIHVzaW5nIG5vbi0wIGdhcyBwcmljZVxuZXhwb3J0IGNvbnN0IGwyV2FsbGV0ID0gbDFXYWxsZXQuY29ubmVjdChsMlByb3ZpZGVyKVxuXG4vLyBQcmVkZXBsb3lzXG5leHBvcnQgY29uc3QgUFJPWFlfU0VRVUVOQ0VSX0VOVFJZUE9JTlRfQUREUkVTUyA9ICcweDQyMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQnXG5leHBvcnQgY29uc3QgT1ZNX0VUSF9BRERSRVNTID0gJzB4NDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNidcblxuLy8gVGhlIGFkZHJlc3MgbWFuYWdlciBpcyBhbHdheXMgYXQgdGhlIHNhbWUgYWRkcmVzcyBpbiB0ZXN0bmV0IGRlcGxveW1lbnRzXG5leHBvcnQgY29uc3QgYWRkcmVzc01hbmFnZXJBZGRyZXNzID0gJzB4NUZiREIyMzE1Njc4YWZlY2IzNjdmMDMyZDkzRjY0MmY2NDE4MGFhMydcblxuZXhwb3J0IGNvbnN0IGdldEFkZHJlc3NNYW5hZ2VyID0gKHByb3ZpZGVyOiBhbnkpID0+IHtcbiAgcmV0dXJuIGdldENvbnRyYWN0RmFjdG9yeSgnTGliX0FkZHJlc3NNYW5hZ2VyJykuY29ubmVjdChwcm92aWRlcikuYXR0YWNoKGFkZHJlc3NNYW5hZ2VyQWRkcmVzcylcbn1cblxuLy8gR2V0cyB0aGUgZ2F0ZXdheSB1c2luZyB0aGUgcHJveHkgaWYgYXZhaWxhYmxlXG5leHBvcnQgY29uc3QgZ2V0R2F0ZXdheSA9IGFzeW5jICh3YWxsZXQ6IFdhbGxldCwgQWRkcmVzc01hbmFnZXI6IENvbnRyYWN0KSA9PiB7XG4gIGNvbnN0IGwxR2F0ZXdheUludGVyZmFjZSA9IGdldENvbnRyYWN0SW50ZXJmYWNlKCdPVk1fTDFFVEhHYXRld2F5JylcbiAgY29uc3QgUHJveHlHYXRld2F5QWRkcmVzcyA9IGF3YWl0IEFkZHJlc3NNYW5hZ2VyLmdldEFkZHJlc3MoJ1Byb3h5X19PVk1fTDFFVEhHYXRld2F5JylcbiAgY29uc3QgYWRkcmVzc1RvVXNlID1cbiAgICBQcm94eUdhdGV3YXlBZGRyZXNzICE9PSBjb25zdGFudHMuQWRkcmVzc1plcm9cbiAgICAgID8gUHJveHlHYXRld2F5QWRkcmVzc1xuICAgICAgOiBhd2FpdCBBZGRyZXNzTWFuYWdlci5nZXRBZGRyZXNzKCdPVk1fTDFFVEhHYXRld2F5JylcblxuICBjb25zdCBPVk1fTDFFVEhHYXRld2F5ID0gbmV3IENvbnRyYWN0KGFkZHJlc3NUb1VzZSwgbDFHYXRld2F5SW50ZXJmYWNlLCB3YWxsZXQpXG5cbiAgcmV0dXJuIE9WTV9MMUVUSEdhdGV3YXlcbn1cblxuZXhwb3J0IGNvbnN0IGdldE92bUV0aCA9ICh3YWxsZXQ6IFdhbGxldCkgPT4gbmV3IENvbnRyYWN0KE9WTV9FVEhfQUREUkVTUywgZ2V0Q29udHJhY3RJbnRlcmZhY2UoJ09WTV9FVEgnKSwgd2FsbGV0KVxuXG5leHBvcnQgY29uc3QgZnVuZFVzZXIgPSBhc3luYyAod2F0Y2hlcjogV2F0Y2hlciwgZ2F0ZXdheTogQ29udHJhY3QsIGFtb3VudDogQmlnTnVtYmVyaXNoLCByZWNpcGllbnQ/OiBzdHJpbmcpID0+IHtcbiAgY29uc3QgdmFsdWUgPSBCaWdOdW1iZXIuZnJvbShhbW91bnQpXG4gIGNvbnN0IHR4ID0gcmVjaXBpZW50ID8gZ2F0ZXdheS5kZXBvc2l0VG8ocmVjaXBpZW50LCB7IHZhbHVlIH0pIDogZ2F0ZXdheS5kZXBvc2l0KHsgdmFsdWUgfSlcbiAgYXdhaXQgd2FpdEZvclhEb21haW5UcmFuc2FjdGlvbih3YXRjaGVyLCB0eCwgRGlyZWN0aW9uLkwxVG9MMilcbn1cbiJdfQ==