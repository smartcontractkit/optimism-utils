"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForXDomainTransaction = exports.Direction = exports.initWatcher = void 0;
const watcher_1 = require("./watcher");
const initWatcher = async (l1Provider, l2Provider, AddressManager) => {
    const l1MessengerAddress = await AddressManager.getAddress('Proxy__OVM_L1CrossDomainMessenger');
    const l2MessengerAddress = await AddressManager.getAddress('OVM_L2CrossDomainMessenger');
    return new watcher_1.Watcher({
        l1: {
            provider: l1Provider,
            messengerAddress: l1MessengerAddress,
        },
        l2: {
            provider: l2Provider,
            messengerAddress: l2MessengerAddress,
        },
    });
};
exports.initWatcher = initWatcher;
var Direction;
(function (Direction) {
    Direction[Direction["L1ToL2"] = 0] = "L1ToL2";
    Direction[Direction["L2ToL1"] = 1] = "L2ToL1";
})(Direction = exports.Direction || (exports.Direction = {}));
const waitForXDomainTransaction = async (watcher, tx, direction) => {
    const { src, dest } = direction === Direction.L1ToL2 ? { src: watcher.l1, dest: watcher.l2 } : { src: watcher.l2, dest: watcher.l1 };
    // await it if needed
    tx = await tx;
    // get the receipt and the full transaction
    const receipt = await tx.wait();
    const fullTx = await src.provider.getTransaction(tx.hash);
    // get the message hash which was created on the SentMessage
    const [xDomainMsgHash] = await watcher.getMessageHashesFromTx(src, tx.hash);
    // Get the transaction and receipt on the remote layer
    const remoteReceipt = (await watcher.getTransactionReceipt(dest, xDomainMsgHash));
    const remoteTx = await dest.provider.getTransaction(remoteReceipt.transactionHash);
    return {
        tx: fullTx,
        receipt,
        remoteTx,
        remoteReceipt,
    };
};
exports.waitForXDomainTransaction = waitForXDomainTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2hlci11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy93YXRjaGVyLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHVDQUFtQztBQUU1QixNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQzlCLFVBQTJCLEVBQzNCLFVBQTJCLEVBQzNCLGNBQXdCLEVBQ3hCLEVBQUU7SUFDRixNQUFNLGtCQUFrQixHQUFHLE1BQU0sY0FBYyxDQUFDLFVBQVUsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFBO0lBQy9GLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxjQUFjLENBQUMsVUFBVSxDQUFDLDRCQUE0QixDQUFDLENBQUE7SUFDeEYsT0FBTyxJQUFJLGlCQUFPLENBQUM7UUFDakIsRUFBRSxFQUFFO1lBQ0YsUUFBUSxFQUFFLFVBQVU7WUFDcEIsZ0JBQWdCLEVBQUUsa0JBQWtCO1NBQ3JDO1FBQ0QsRUFBRSxFQUFFO1lBQ0YsUUFBUSxFQUFFLFVBQVU7WUFDcEIsZ0JBQWdCLEVBQUUsa0JBQWtCO1NBQ3JDO0tBQ0YsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFBO0FBakJZLFFBQUEsV0FBVyxlQWlCdkI7QUFTRCxJQUFZLFNBR1g7QUFIRCxXQUFZLFNBQVM7SUFDbkIsNkNBQU0sQ0FBQTtJQUNOLDZDQUFNLENBQUE7QUFDUixDQUFDLEVBSFcsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFHcEI7QUFFTSxNQUFNLHlCQUF5QixHQUFHLEtBQUssRUFDNUMsT0FBZ0IsRUFDaEIsRUFBc0QsRUFDdEQsU0FBb0IsRUFDYSxFQUFFO0lBQ25DLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQ2pCLFNBQVMsS0FBSyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQTtJQUVoSCxxQkFBcUI7SUFDckIsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFBO0lBQ2IsMkNBQTJDO0lBQzNDLE1BQU0sT0FBTyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0lBQy9CLE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBRXpELDREQUE0RDtJQUM1RCxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsc0JBQXNCLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUMzRSxzREFBc0Q7SUFDdEQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQXVCLENBQUE7SUFDdkcsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUE7SUFFbEYsT0FBTztRQUNMLEVBQUUsRUFBRSxNQUFNO1FBQ1YsT0FBTztRQUNQLFFBQVE7UUFDUixhQUFhO0tBQ2QsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQTFCWSxRQUFBLHlCQUF5Qiw2QkEwQnJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udHJhY3QsIFRyYW5zYWN0aW9uIH0gZnJvbSAnZXRoZXJzJ1xuaW1wb3J0IHsgSnNvblJwY1Byb3ZpZGVyLCBUcmFuc2FjdGlvblJlY2VpcHQsIFRyYW5zYWN0aW9uUmVzcG9uc2UgfSBmcm9tICdAZXRoZXJzcHJvamVjdC9wcm92aWRlcnMnXG5pbXBvcnQgeyBXYXRjaGVyIH0gZnJvbSAnLi93YXRjaGVyJ1xuXG5leHBvcnQgY29uc3QgaW5pdFdhdGNoZXIgPSBhc3luYyAoXG4gIGwxUHJvdmlkZXI6IEpzb25ScGNQcm92aWRlcixcbiAgbDJQcm92aWRlcjogSnNvblJwY1Byb3ZpZGVyLFxuICBBZGRyZXNzTWFuYWdlcjogQ29udHJhY3QsXG4pID0+IHtcbiAgY29uc3QgbDFNZXNzZW5nZXJBZGRyZXNzID0gYXdhaXQgQWRkcmVzc01hbmFnZXIuZ2V0QWRkcmVzcygnUHJveHlfX09WTV9MMUNyb3NzRG9tYWluTWVzc2VuZ2VyJylcbiAgY29uc3QgbDJNZXNzZW5nZXJBZGRyZXNzID0gYXdhaXQgQWRkcmVzc01hbmFnZXIuZ2V0QWRkcmVzcygnT1ZNX0wyQ3Jvc3NEb21haW5NZXNzZW5nZXInKVxuICByZXR1cm4gbmV3IFdhdGNoZXIoe1xuICAgIGwxOiB7XG4gICAgICBwcm92aWRlcjogbDFQcm92aWRlcixcbiAgICAgIG1lc3NlbmdlckFkZHJlc3M6IGwxTWVzc2VuZ2VyQWRkcmVzcyxcbiAgICB9LFxuICAgIGwyOiB7XG4gICAgICBwcm92aWRlcjogbDJQcm92aWRlcixcbiAgICAgIG1lc3NlbmdlckFkZHJlc3M6IGwyTWVzc2VuZ2VyQWRkcmVzcyxcbiAgICB9LFxuICB9KVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyb3NzRG9tYWluTWVzc2FnZVBhaXIge1xuICB0eDogVHJhbnNhY3Rpb25cbiAgcmVjZWlwdDogVHJhbnNhY3Rpb25SZWNlaXB0XG4gIHJlbW90ZVR4OiBUcmFuc2FjdGlvblxuICByZW1vdGVSZWNlaXB0OiBUcmFuc2FjdGlvblJlY2VpcHRcbn1cblxuZXhwb3J0IGVudW0gRGlyZWN0aW9uIHtcbiAgTDFUb0wyLFxuICBMMlRvTDEsXG59XG5cbmV4cG9ydCBjb25zdCB3YWl0Rm9yWERvbWFpblRyYW5zYWN0aW9uID0gYXN5bmMgKFxuICB3YXRjaGVyOiBXYXRjaGVyLFxuICB0eDogUHJvbWlzZTxUcmFuc2FjdGlvblJlc3BvbnNlPiB8IFRyYW5zYWN0aW9uUmVzcG9uc2UsXG4gIGRpcmVjdGlvbjogRGlyZWN0aW9uLFxuKTogUHJvbWlzZTxDcm9zc0RvbWFpbk1lc3NhZ2VQYWlyPiA9PiB7XG4gIGNvbnN0IHsgc3JjLCBkZXN0IH0gPVxuICAgIGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLkwxVG9MMiA/IHsgc3JjOiB3YXRjaGVyLmwxLCBkZXN0OiB3YXRjaGVyLmwyIH0gOiB7IHNyYzogd2F0Y2hlci5sMiwgZGVzdDogd2F0Y2hlci5sMSB9XG5cbiAgLy8gYXdhaXQgaXQgaWYgbmVlZGVkXG4gIHR4ID0gYXdhaXQgdHhcbiAgLy8gZ2V0IHRoZSByZWNlaXB0IGFuZCB0aGUgZnVsbCB0cmFuc2FjdGlvblxuICBjb25zdCByZWNlaXB0ID0gYXdhaXQgdHgud2FpdCgpXG4gIGNvbnN0IGZ1bGxUeCA9IGF3YWl0IHNyYy5wcm92aWRlci5nZXRUcmFuc2FjdGlvbih0eC5oYXNoKVxuXG4gIC8vIGdldCB0aGUgbWVzc2FnZSBoYXNoIHdoaWNoIHdhcyBjcmVhdGVkIG9uIHRoZSBTZW50TWVzc2FnZVxuICBjb25zdCBbeERvbWFpbk1zZ0hhc2hdID0gYXdhaXQgd2F0Y2hlci5nZXRNZXNzYWdlSGFzaGVzRnJvbVR4KHNyYywgdHguaGFzaClcbiAgLy8gR2V0IHRoZSB0cmFuc2FjdGlvbiBhbmQgcmVjZWlwdCBvbiB0aGUgcmVtb3RlIGxheWVyXG4gIGNvbnN0IHJlbW90ZVJlY2VpcHQgPSAoYXdhaXQgd2F0Y2hlci5nZXRUcmFuc2FjdGlvblJlY2VpcHQoZGVzdCwgeERvbWFpbk1zZ0hhc2gpKSBhcyBUcmFuc2FjdGlvblJlY2VpcHRcbiAgY29uc3QgcmVtb3RlVHggPSBhd2FpdCBkZXN0LnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uKHJlbW90ZVJlY2VpcHQudHJhbnNhY3Rpb25IYXNoKVxuXG4gIHJldHVybiB7XG4gICAgdHg6IGZ1bGxUeCxcbiAgICByZWNlaXB0LFxuICAgIHJlbW90ZVR4LFxuICAgIHJlbW90ZVJlY2VpcHQsXG4gIH1cbn1cbiJdfQ==